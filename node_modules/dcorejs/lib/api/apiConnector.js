"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module ApiConnector
 */
var axios_1 = require("axios");
var ApiConnectorError;
(function (ApiConnectorError) {
    ApiConnectorError["ws_connection_failed"] = "ws_connection_failed";
})(ApiConnectorError = exports.ApiConnectorError || (exports.ApiConnectorError = {}));
var ConnectionState;
(function (ConnectionState) {
    ConnectionState["open"] = "open";
    ConnectionState["closed"] = "closed";
    ConnectionState["reconnect"] = "reconnect";
    ConnectionState["error"] = "error";
    ConnectionState["unknown"] = "unknown";
})(ConnectionState = exports.ConnectionState || (exports.ConnectionState = {}));
/**
 * ApiConnector provide connection to dcorejs-lib apis
 *
 * @export
 * @class ApiConnector
 */
var ApiConnector = /** @class */ (function () {
    function ApiConnector(apiAddresses, api, testConnectionQuality, connectionStatusCallback) {
        if (testConnectionQuality === void 0) { testConnectionQuality = true; }
        if (connectionStatusCallback === void 0) { connectionStatusCallback = null; }
        this._isConnected = false;
        this.connectedAddress = null;
        this._apiAddresses = apiAddresses;
        this._api = api;
        this.connectionStatusCallback = connectionStatusCallback;
        this.testConnectionQuality = testConnectionQuality;
        this.initConnetion(apiAddresses, api, testConnectionQuality, connectionStatusCallback);
    }
    Object.defineProperty(ApiConnector.prototype, "isConnected", {
        get: function () {
            return this._isConnected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApiConnector.prototype, "apiAddresses", {
        get: function () {
            return this._apiAddresses;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Create new connection to WS interface of daemon with addresses.
     *
     * @param {string[]} addresses
     * @param api
     * @param {boolean} testConnectionQuality
     * @param {(status: ConnectionState) => void} connectionStatusCallback
     */
    ApiConnector.prototype.initConnetion = function (addresses, api, testConnectionQuality, connectionStatusCallback) {
        var _this = this;
        if (testConnectionQuality === void 0) { testConnectionQuality = true; }
        if (connectionStatusCallback === void 0) { connectionStatusCallback = null; }
        api.setRpcConnectionStatusCallback(function (status) { return _this.handleConnectionState(status, connectionStatusCallback); });
        this._connectionPromise = this.connectApi(addresses, api, testConnectionQuality);
    };
    /**
     * Connect DCore network daemon api using dcorejs-lib.
     *
     * @param {string[]} addresses              Addresses to connect to.
     * @param api                               Dcorejs-lib Apis object.
     * @param {boolean} testConnectionQuality   Parameter to turn on/off connection speed test. Default is 'true'.
     * @returns {Promise<any>}                  Connection promise.
     */
    ApiConnector.prototype.connectApi = function (addresses, api, testConnectionQuality) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var conTestResults, i, address, res, e_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!testConnectionQuality) return [3 /*break*/, 2];
                                    return [4 /*yield*/, this.testConnectionTime(addresses)];
                                case 1:
                                    conTestResults = _a.sent();
                                    addresses = conTestResults
                                        .filter(function (r) { return r.success; })
                                        .sort(function (a, b) { return a.elapsedTime - b.elapsedTime; })
                                        .map(function (r) { return r.address; });
                                    _a.label = 2;
                                case 2:
                                    i = 0;
                                    _a.label = 3;
                                case 3:
                                    if (!(i < addresses.length)) return [3 /*break*/, 8];
                                    address = ['wss'].concat(addresses[i].split(':').slice(1)).join(':');
                                    _a.label = 4;
                                case 4:
                                    _a.trys.push([4, 6, , 7]);
                                    return [4 /*yield*/, this.getConnectionPromise(address, api)];
                                case 5:
                                    res = _a.sent();
                                    this._isConnected = true;
                                    this.connectedAddress = address;
                                    console.log('Connected to', address);
                                    resolve(res);
                                    return [2 /*return*/];
                                case 6:
                                    e_1 = _a.sent();
                                    console.log('Fail to connect to', address);
                                    api.close();
                                    return [3 /*break*/, 7];
                                case 7:
                                    i += 1;
                                    return [3 /*break*/, 3];
                                case 8:
                                    this._isConnected = false;
                                    reject(this.handleError(ApiConnectorError.ws_connection_failed));
                                    return [2 /*return*/];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Test every address connection time to determine fastest.
     * @param {string[]} addresses                  Addresses to test.
     * @returns {Promise<ConnectionTestResult[]>}   List of ConnectionTestResult.
     */
    ApiConnector.prototype.testConnectionTime = function (addresses) {
        var _this = this;
        var httpAddrses = addresses.map(function (address) {
            return ['https'].concat(address.split(':').slice(1)).join(':');
        });
        var promises = httpAddrses.map(function (httpAddress) {
            return new Promise((function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var refTime, time, e_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            refTime = new Date();
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, axios_1.default.get(httpAddress)];
                        case 2:
                            _a.sent();
                            time = new Date();
                            resolve({
                                address: httpAddress,
                                elapsedTime: time.getTime() - refTime.getTime(),
                                success: true
                            });
                            return [3 /*break*/, 4];
                        case 3:
                            e_2 = _a.sent();
                            resolve({
                                address: httpAddress,
                                elapsedTime: 0,
                                success: false
                            });
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            }); }));
        });
        return Promise.all(promises);
    };
    ApiConnector.prototype.getConnectionPromise = function (forAddress, api) {
        return api.instance(forAddress, true).init_promise;
    };
    /**
     * Return promise of connection. Once connection is established Promise is resolved and is able to run operations on apis.
     * Closed connection can be opened using openConnection() method.
     *
     * @returns {Promise<void>}     Connection promise.
     */
    ApiConnector.prototype.connect = function () {
        if (!this._connectionPromise) {
            return new Promise((function (resolve, reject) { return reject('connection_closed'); }));
        }
        return this._connectionPromise;
    };
    /**
     * Opens WS connection based on initialize configuration.
     *
     * @returns {Promise<void>}     Connection promise.
     */
    ApiConnector.prototype.openConnection = function () {
        if (this._connectionPromise === null) {
            this.initConnetion(this._apiAddresses, this._api, this.testConnectionQuality, this.connectionStatusCallback);
        }
    };
    /**
     * Closes opened WS connection.
     */
    ApiConnector.prototype.closeConnection = function () {
        this._isConnected = false;
        this._api.close();
        this._connectionPromise = null;
        console.log('Closed connection to', this.connectedAddress);
        this.connectedAddress = null;
    };
    ApiConnector.prototype.handleConnectionState = function (state, callback) {
        if (callback === null) {
            return;
        }
        var connectionState;
        switch (state) {
            case 'open':
                connectionState = ConnectionState.open;
                break;
            case 'reconnect':
                connectionState = ConnectionState.reconnect;
                break;
            case 'error':
                connectionState = ConnectionState.error;
                break;
            case 'closed':
                connectionState = ConnectionState.closed;
                break;
            default:
                connectionState = ConnectionState.unknown;
                break;
        }
        callback(connectionState);
    };
    ApiConnector.prototype.handleError = function (message, err) {
        if (err === void 0) { err = ''; }
        var error = new Error(message);
        error.stack = err;
        return error;
    };
    return ApiConnector;
}());
exports.ApiConnector = ApiConnector;
//# sourceMappingURL=apiConnector.js.map