"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module Model/Account
 */
var utils_1 = require("../utils");
var crypt_1 = require("../crypt");
var chain_1 = require("../api/chain");
var Asset = /** @class */ (function () {
    function Asset(amount, assetId) {
        this.asset_id = assetId;
        this.amount = amount;
    }
    Asset.createDCTAsset = function (amount) {
        return {
            amount: amount * chain_1.ChainApi.DCTPower,
            asset_id: chain_1.ChainApi.asset_id
        };
    };
    Asset.create = function (amount, assetObject) {
        return new Asset(utils_1.Utils.formatAmountToAsset(amount, assetObject), assetObject.id);
    };
    return Asset;
}());
exports.Asset = Asset;
var KeyAuth = /** @class */ (function () {
    function KeyAuth(key, value) {
        if (value === void 0) { value = 1; }
        this._key = key;
        this._value = value;
    }
    KeyAuth.prototype.keyAuthFormat = function () {
        return [this._key, this._value];
    };
    return KeyAuth;
}());
exports.KeyAuth = KeyAuth;
var OperationType;
(function (OperationType) {
    OperationType[OperationType["transfer"] = 0] = "transfer";
    OperationType[OperationType["account_create"] = 1] = "account_create";
    OperationType[OperationType["content_submit"] = 2] = "content_submit";
    OperationType[OperationType["content_buy"] = 3] = "content_buy";
    OperationType[OperationType["content_rate"] = 4] = "content_rate";
    OperationType[OperationType["subscription"] = 5] = "subscription";
})(OperationType = exports.OperationType || (exports.OperationType = {}));
var TransactionRecord = /** @class */ (function () {
    function TransactionRecord(transaction, privateKeys) {
        this.id = transaction.id;
        this.fromAccountId = transaction.m_from_account;
        this.toAccountId = transaction.m_to_account;
        this.operationType = transaction.m_operation_type;
        this.transactionAmount = transaction.m_transaction_amount.amount;
        this.transactionAsset = transaction.m_transaction_amount.asset_id;
        this.transactionFee = transaction.m_transaction_fee.amount;
        this.transactionFeeAsset = transaction.m_transaction_fee.asset_id;
        this.description = transaction.m_str_description;
        this.timestamp = transaction.m_timestamp;
        this.memo = new TransactionMemo(transaction);
        this.memoString = this.memo.decryptedMessage(privateKeys);
    }
    return TransactionRecord;
}());
exports.TransactionRecord = TransactionRecord;
var TransactionMemo = /** @class */ (function () {
    function TransactionMemo(transaction) {
        if (!transaction.m_transaction_encrypted_memo) {
            this.valid = false;
        }
        else {
            this.valid = true;
            this.from = transaction.m_transaction_encrypted_memo.from;
            this.message = transaction.m_transaction_encrypted_memo.message;
            this.nonce = transaction.m_transaction_encrypted_memo.nonce;
            this.to = transaction.m_transaction_encrypted_memo.to;
        }
    }
    TransactionMemo.prototype.decryptedMessage = function (privateKeys) {
        var _this = this;
        if (!this.valid) {
            return '';
        }
        var pubKey = utils_1.Utils.publicKeyFromString(this.to);
        var decrypted = '';
        privateKeys.forEach(function (pk) {
            var pKey;
            try {
                pKey = utils_1.Utils.privateKeyFromWif(pk);
                try {
                    decrypted = crypt_1.CryptoUtils.decryptWithChecksum(_this.message, pKey, pubKey, _this.nonce).toString();
                }
                catch (err) {
                    throw new Error(AccountError.account_keys_incorrect);
                }
            }
            catch (err) {
            }
        });
        return decrypted;
    };
    return TransactionMemo;
}());
exports.TransactionMemo = TransactionMemo;
var AccountError;
(function (AccountError) {
    AccountError["account_does_not_exist"] = "account_does_not_exist";
    AccountError["account_fetch_failed"] = "account_fetch_failed";
    AccountError["transaction_history_fetch_failed"] = "transaction_history_fetch_failed";
    AccountError["transfer_missing_pkey"] = "transfer_missing_pkey";
    AccountError["transfer_sender_account_not_found"] = "transfer_sender_account_not_found";
    AccountError["transfer_receiver_account_not_found"] = "transfer_receiver_account_not_found";
    AccountError["database_operation_failed"] = "database_operation_failed";
    AccountError["transaction_broadcast_failed"] = "transaction_broadcast_failed";
    AccountError["account_keys_incorrect"] = "account_keys_incorrect";
    AccountError["bad_parameter"] = "bad_parameter";
    AccountError["history_fetch_failed"] = "history_fetch_failed";
    AccountError["cannot_update_miner_votes"] = "cannot_update_miner_votes";
    AccountError["votes_does_not_changed"] = "votes_does_not_changed";
    AccountError["asset_does_not_exist"] = "asset_does_not_exist";
    AccountError["account_update_failed"] = "account_update_failed";
    AccountError["syntactic_error"] = "syntactic_error";
})(AccountError = exports.AccountError || (exports.AccountError = {}));
//# sourceMappingURL=account.js.map