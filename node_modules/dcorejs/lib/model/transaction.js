"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var prototype = require("./operationPrototype");
/**
 * OperationType to be broadcasted to blockchain
 * internal representation
 */
var Operation = /** @class */ (function () {
    function Operation(name, type) {
        this.name = name;
        this.operation = type;
    }
    return Operation;
}());
exports.Operation = Operation;
/**
 * Class contains available transaction operation names constants
 */
var OperationName;
(function (OperationName) {
    OperationName["transfer"] = "transfer";
    OperationName["content_cancellation"] = "content_cancellation";
    OperationName["requestToBuy"] = "request_to_buy";
    OperationName["content_submit"] = "content_submit";
    OperationName["account_update"] = "account_update";
    OperationName["asset_create"] = "asset_create";
    OperationName["issue_asset"] = "asset_issue";
    OperationName["update_user_issued_asset"] = "update_user_issued_asset";
    OperationName["asset_fund_pools_operation"] = "asset_fund_pools_operation";
    OperationName["asset_reserve_operation"] = "asset_reserve_operation";
    OperationName["asset_claim_fees_operation"] = "asset_claim_fees_operation";
    OperationName["leave_rating_and_comment"] = "leave_rating_and_comment";
    OperationName["account_create"] = "account_create";
    OperationName["asset_publish_feed"] = "asset_publish_feed";
    OperationName["miner_create"] = "miner_create";
    OperationName["miner_update"] = "miner_update";
    OperationName["miner_update_global_parameters"] = "miner_update_global_parameters";
    OperationName["proposal_create"] = "proposal_create";
    OperationName["proposal_update"] = "proposal_update";
    OperationName["operation_wrapper"] = "op_wrapper";
    OperationName["vesting_balance_withdraw"] = "vesting_balance_withdraw";
    OperationName["subscribe"] = "subscribe";
    OperationName["subscribe_by_author"] = "subscribe_by_author";
    OperationName["automatic_renewal_of_subscription"] = "automatic_renewal_of_subscription";
    OperationName["custom_operation"] = "custom";
    OperationName["update_monitored_asset_operation"] = "update_monitored_asset_operation";
})(OperationName = exports.OperationName || (exports.OperationName = {}));
/**
 * Asset represent amount of specific
 * asset.
 */
var Asset = /** @class */ (function () {
    function Asset() {
    }
    return Asset;
}());
exports.Asset = Asset;
/**
 * Operations collection which can be constructed and send to blockchain network
 */
var Operations;
(function (Operations) {
    var TransferOperation = /** @class */ (function (_super) {
        __extends(TransferOperation, _super);
        function TransferOperation(from, to, amount, memo) {
            var _this = this;
            var type = { from: from, to: to, amount: amount, memo: memo };
            _this = _super.call(this, OperationName.transfer, type) || this;
            return _this;
        }
        TransferOperation.getPrototype = function () {
            return prototype.TransferPrototype.getPrototype();
        };
        return TransferOperation;
    }(Operation));
    Operations.TransferOperation = TransferOperation;
    var ContentCancelOperation = /** @class */ (function (_super) {
        __extends(ContentCancelOperation, _super);
        function ContentCancelOperation(author, URI) {
            var _this = this;
            var type = { author: author, URI: URI };
            _this = _super.call(this, OperationName.content_cancellation, type) || this;
            return _this;
        }
        ContentCancelOperation.getPrototype = function () {
            return prototype.ContentCancelPrototype.getPrototype();
        };
        return ContentCancelOperation;
    }(Operation));
    Operations.ContentCancelOperation = ContentCancelOperation;
    var BuyContentOperation = /** @class */ (function (_super) {
        __extends(BuyContentOperation, _super);
        function BuyContentOperation(URI, consumer, price, region_code_from, pubKey) {
            var _this = this;
            var type = { URI: URI, consumer: consumer, price: price, region_code_from: region_code_from,
                pubKey: pubKey };
            _this = _super.call(this, OperationName.requestToBuy, type) || this;
            return _this;
        }
        BuyContentOperation.getPrototype = function () {
            return prototype.BuyContentPrototype.getPrototype();
        };
        return BuyContentOperation;
    }(Operation));
    Operations.BuyContentOperation = BuyContentOperation;
    var SubmitContentOperation = /** @class */ (function (_super) {
        __extends(SubmitContentOperation, _super);
        function SubmitContentOperation(size, author, co_authors, URI, quorum, price, hash, seeders, key_parts, expiration, publishing_fee, synopsis) {
            var _this = this;
            var type = {
                size: size, author: author, co_authors: co_authors, URI: URI, quorum: quorum, price: price, hash: hash, seeders: seeders, key_parts: key_parts, expiration: expiration, publishing_fee: publishing_fee, synopsis: synopsis
            };
            _this = _super.call(this, OperationName.content_submit, type) || this;
            return _this;
        }
        SubmitContentOperation.getPrototype = function () {
            return prototype.SubmitContentPrototype.getPrototype();
        };
        return SubmitContentOperation;
    }(Operation));
    Operations.SubmitContentOperation = SubmitContentOperation;
    var AccountUpdateOperation = /** @class */ (function (_super) {
        __extends(AccountUpdateOperation, _super);
        function AccountUpdateOperation(account, owner, active, new_options, extensions) {
            var _this = this;
            var type = { account: account, owner: owner, active: active, new_options: new_options, extensions: extensions };
            _this = _super.call(this, OperationName.account_update, type) || this;
            return _this;
        }
        AccountUpdateOperation.getPrototype = function () {
            return prototype.UpdateAccountPrototype.getPrototype();
        };
        return AccountUpdateOperation;
    }(Operation));
    Operations.AccountUpdateOperation = AccountUpdateOperation;
    var AssetCreateOperation = /** @class */ (function (_super) {
        __extends(AssetCreateOperation, _super);
        function AssetCreateOperation(issuer, symbol, precision, description, options, monitoredOptions) {
            if (monitoredOptions === void 0) { monitoredOptions = null; }
            var _this = this;
            var type = { issuer: issuer, symbol: symbol, precision: precision, description: description, options: options,
                is_exchangeable: options.is_exchangeable, extensions: [] };
            if (monitoredOptions) {
                type['monitored_asset_opts'] = monitoredOptions;
            }
            _this = _super.call(this, OperationName.asset_create, type) || this;
            return _this;
        }
        AssetCreateOperation.getPrototype = function () {
            return prototype.AssetCreatePrototype.getPrototype();
        };
        return AssetCreateOperation;
    }(Operation));
    Operations.AssetCreateOperation = AssetCreateOperation;
    var IssueAssetOperation = /** @class */ (function (_super) {
        __extends(IssueAssetOperation, _super);
        function IssueAssetOperation(issuer, assetToIssue, issueToAccount, memo) {
            var _this = this;
            var type = {
                issuer: issuer, asset_to_issue: assetToIssue, issue_to_account: issueToAccount, memo: memo, extensions: {}
            };
            _this = _super.call(this, OperationName.issue_asset, type) || this;
            return _this;
        }
        IssueAssetOperation.getPrototype = function () {
            return prototype.IssueAssetPrototype.getPrototype();
        };
        return IssueAssetOperation;
    }(Operation));
    Operations.IssueAssetOperation = IssueAssetOperation;
    var UpdateAssetIssuedOperation = /** @class */ (function (_super) {
        __extends(UpdateAssetIssuedOperation, _super);
        function UpdateAssetIssuedOperation(issuer, asset_to_update, new_description, max_supply, core_exchange_rate, is_exchangeable, new_issuer) {
            var _this = this;
            var type = {
                issuer: issuer,
                asset_to_update: asset_to_update,
                new_description: new_description,
                max_supply: max_supply,
                core_exchange_rate: core_exchange_rate,
                is_exchangeable: is_exchangeable,
                new_issuer: new_issuer,
                extensions: {}
            };
            _this = _super.call(this, OperationName.update_user_issued_asset, type) || this;
            return _this;
        }
        UpdateAssetIssuedOperation.getPrototype = function () {
            return prototype.UpdateUserIssuedAssetPrototype.getPrototype();
        };
        return UpdateAssetIssuedOperation;
    }(Operation));
    Operations.UpdateAssetIssuedOperation = UpdateAssetIssuedOperation;
    var AssetFundPools = /** @class */ (function (_super) {
        __extends(AssetFundPools, _super);
        function AssetFundPools(fromAccountId, uiaAsset, dctAsset) {
            var _this = this;
            var type = { from_account: fromAccountId, uia_asset: uiaAsset, dct_asset: dctAsset };
            _this = _super.call(this, OperationName.asset_fund_pools_operation, type) || this;
            return _this;
        }
        AssetFundPools.getPrototype = function () {
            return prototype.AssetFundPoolsPrototype.getPrototype();
        };
        return AssetFundPools;
    }(Operation));
    Operations.AssetFundPools = AssetFundPools;
    var AssetReserve = /** @class */ (function (_super) {
        __extends(AssetReserve, _super);
        function AssetReserve(payer, assetToReserve) {
            var _this = this;
            var type = { payer: payer, amount_to_reserve: assetToReserve, extensions: {} };
            _this = _super.call(this, OperationName.asset_reserve_operation, type) || this;
            return _this;
        }
        AssetReserve.getPrototype = function () {
            return prototype.AssetReservePrototype.getPrototype();
        };
        return AssetReserve;
    }(Operation));
    Operations.AssetReserve = AssetReserve;
    var AssetClaimFeesOperation = /** @class */ (function (_super) {
        __extends(AssetClaimFeesOperation, _super);
        function AssetClaimFeesOperation(issuer, uiaAsset, dctAsset) {
            var _this = this;
            var type = { issuer: issuer, uia_asset: uiaAsset, dct_asset: dctAsset, extensions: {} };
            _this = _super.call(this, OperationName.asset_claim_fees_operation, type) || this;
            return _this;
        }
        AssetClaimFeesOperation.getPrototype = function () {
            return prototype.AssetClaimFeesPrototype.getPrototype();
        };
        return AssetClaimFeesOperation;
    }(Operation));
    Operations.AssetClaimFeesOperation = AssetClaimFeesOperation;
    var LeaveRatingAndComment = /** @class */ (function (_super) {
        __extends(LeaveRatingAndComment, _super);
        function LeaveRatingAndComment(URI, consumer, comment, rating) {
            var _this = this;
            var type = { URI: URI, consumer: consumer, comment: comment, rating: rating };
            _this = _super.call(this, OperationName.leave_rating_and_comment, type) || this;
            return _this;
        }
        LeaveRatingAndComment.getPrototype = function () {
            return prototype.LeaveRatingAndCommentPrototype.getPrototype();
        };
        return LeaveRatingAndComment;
    }(Operation));
    Operations.LeaveRatingAndComment = LeaveRatingAndComment;
    var AssetPublishFeed = /** @class */ (function (_super) {
        __extends(AssetPublishFeed, _super);
        function AssetPublishFeed(publisher, assetId, feed) {
            var _this = this;
            var type = { publisher: publisher, asset_id: assetId, feed: feed, extensions: {} };
            _this = _super.call(this, OperationName.asset_publish_feed, type) || this;
            return _this;
        }
        AssetPublishFeed.getPrototype = function () {
            return prototype.AssetPublishFeedPrototype.getPrototype();
        };
        return AssetPublishFeed;
    }(Operation));
    Operations.AssetPublishFeed = AssetPublishFeed;
    var MinerCreate = /** @class */ (function (_super) {
        __extends(MinerCreate, _super);
        function MinerCreate(miner_account, url, block_signing_key) {
            var _this = this;
            var type = { miner_account: miner_account, url: url, block_signing_key: block_signing_key };
            _this = _super.call(this, OperationName.miner_create, type) || this;
            return _this;
        }
        MinerCreate.getPrototype = function () {
            return prototype.MinerCreatePrototype.getPrototype();
        };
        return MinerCreate;
    }(Operation));
    Operations.MinerCreate = MinerCreate;
    var MinerUpdate = /** @class */ (function (_super) {
        __extends(MinerUpdate, _super);
        function MinerUpdate(miner, minerAccount, newURL, newSigningKey) {
            if (newURL === void 0) { newURL = null; }
            if (newSigningKey === void 0) { newSigningKey = null; }
            var _this = this;
            var type = { miner: miner, miner_account: minerAccount, new_url: newURL, new_signing_key: newSigningKey };
            _this = _super.call(this, OperationName.miner_update, type) || this;
            return _this;
        }
        MinerUpdate.getPrototype = function () {
            return prototype.MinerUpdatePrototype.getPrototype();
        };
        return MinerUpdate;
    }(Operation));
    Operations.MinerUpdate = MinerUpdate;
    var MinerUpdateGlobalParameters = /** @class */ (function (_super) {
        __extends(MinerUpdateGlobalParameters, _super);
        function MinerUpdateGlobalParameters(proposalParameters) {
            var _this = this;
            var type = Object.assign({}, proposalParameters);
            _this = _super.call(this, OperationName.miner_update_global_parameters, type) || this;
            return _this;
        }
        MinerUpdateGlobalParameters.getPrototype = function () {
            return prototype.MinerUpdateGlobalParametersPrototype.getPrototype();
        };
        return MinerUpdateGlobalParameters;
    }(Operation));
    Operations.MinerUpdateGlobalParameters = MinerUpdateGlobalParameters;
    var ProposalCreate = /** @class */ (function (_super) {
        __extends(ProposalCreate, _super);
        function ProposalCreate(feePayingAccount, proposedOperations, expirationTime, reviewPeriodSeconds) {
            if (reviewPeriodSeconds === void 0) { reviewPeriodSeconds = null; }
            var _this = this;
            var type = { fee_paying_account: feePayingAccount, proposed_ops: proposedOperations,
                expiration_time: expirationTime, review_period_seconds: reviewPeriodSeconds, extensions: [] };
            _this = _super.call(this, OperationName.proposal_create, type) || this;
            return _this;
        }
        ProposalCreate.getPrototype = function () {
            return prototype.ProposalCreatePrototype.getPrototype();
        };
        return ProposalCreate;
    }(Operation));
    Operations.ProposalCreate = ProposalCreate;
    var ProposalUpdate = /** @class */ (function (_super) {
        __extends(ProposalUpdate, _super);
        function ProposalUpdate(feePayingAccount, proposal, activeApprovalsToAdd, activeApprovalsToRemove, ownerApprovalsToAdd, ownerApprovalsToRemove, keyApprovalsToAdd, keyApprovalsToRemove) {
            var _this = this;
            var type = {
                fee_paying_account: feePayingAccount, proposal: proposal, active_approvals_to_add: activeApprovalsToAdd,
                active_approvals_to_remove: activeApprovalsToRemove, owner_approvals_to_add: ownerApprovalsToAdd,
                owner_approvals_to_remove: ownerApprovalsToRemove, key_approvals_to_add: keyApprovalsToAdd,
                key_approvals_to_remove: keyApprovalsToRemove, extensions: []
            };
            _this = _super.call(this, OperationName.proposal_update, type) || this;
            return _this;
        }
        ProposalUpdate.getPrototype = function () {
            return prototype.ProposalUpdatePrototype.getPrototype();
        };
        return ProposalUpdate;
    }(Operation));
    Operations.ProposalUpdate = ProposalUpdate;
    var OperationWrapper = /** @class */ (function (_super) {
        __extends(OperationWrapper, _super);
        function OperationWrapper(operation) {
            var _this = this;
            var type = { op: operation };
            _this = _super.call(this, OperationName.operation_wrapper, type) || this;
            return _this;
        }
        OperationWrapper.getPrototype = function () {
            return prototype.OperationWrapperPrototype.getPrototype();
        };
        return OperationWrapper;
    }(Operation));
    Operations.OperationWrapper = OperationWrapper;
    var RegisterAccount = /** @class */ (function (_super) {
        __extends(RegisterAccount, _super);
        function RegisterAccount(params) {
            return _super.call(this, OperationName.account_create, params) || this;
        }
        RegisterAccount.getPrototype = function () {
            return prototype.CreateAccountPrototype.getPrototype();
        };
        return RegisterAccount;
    }(Operation));
    Operations.RegisterAccount = RegisterAccount;
    var VestingBalanceWithdraw = /** @class */ (function (_super) {
        __extends(VestingBalanceWithdraw, _super);
        function VestingBalanceWithdraw(vestingBalanceId, ownerId, ammount) {
            var _this = this;
            var type = { vesting_balance: vestingBalanceId, owner: ownerId, amount: ammount };
            _this = _super.call(this, OperationName.vesting_balance_withdraw, type) || this;
            return _this;
        }
        VestingBalanceWithdraw.getPrototype = function () {
            return prototype.VestingBalanceWithdrawPrototype.getPrototype();
        };
        return VestingBalanceWithdraw;
    }(Operation));
    Operations.VestingBalanceWithdraw = VestingBalanceWithdraw;
    var Subscribe = /** @class */ (function (_super) {
        __extends(Subscribe, _super);
        function Subscribe(fromId, toId, price) {
            var _this = this;
            var type = { from: fromId, to: toId, price: price };
            _this = _super.call(this, OperationName.subscribe, type) || this;
            return _this;
        }
        Subscribe.getPrototype = function () {
            return prototype.SubscribePrototype.getPrototype();
        };
        return Subscribe;
    }(Operation));
    Operations.Subscribe = Subscribe;
    var SubscribeByAuthor = /** @class */ (function (_super) {
        __extends(SubscribeByAuthor, _super);
        function SubscribeByAuthor(fromId, toId) {
            var _this = this;
            var type = { from: fromId, to: toId };
            _this = _super.call(this, OperationName.subscribe_by_author, type) || this;
            return _this;
        }
        SubscribeByAuthor.getPrototype = function () {
            return prototype.SubscribeByAuthorPrototype.getPrototype();
        };
        return SubscribeByAuthor;
    }(Operation));
    Operations.SubscribeByAuthor = SubscribeByAuthor;
    var SetAutomaticRenewalOfSubscription = /** @class */ (function (_super) {
        __extends(SetAutomaticRenewalOfSubscription, _super);
        function SetAutomaticRenewalOfSubscription(accountId, subscriptionId, automaticRenewal) {
            var _this = this;
            var type = {
                consumer: accountId, subscription: subscriptionId, automatic_renewal: automaticRenewal
            };
            _this = _super.call(this, OperationName.automatic_renewal_of_subscription, type) || this;
            return _this;
        }
        SetAutomaticRenewalOfSubscription.getPrototype = function () {
            return prototype.SetAutomaticRenewalOfSubscriptionPrototype.getPrototype();
        };
        return SetAutomaticRenewalOfSubscription;
    }(Operation));
    Operations.SetAutomaticRenewalOfSubscription = SetAutomaticRenewalOfSubscription;
    var CustomOperation = /** @class */ (function (_super) {
        __extends(CustomOperation, _super);
        function CustomOperation(payer, required_auths, id, data) {
            return _super.call(this, OperationName.custom_operation, {
                payer: payer,
                required_auths: required_auths,
                id: id,
                data: data
            }) || this;
        }
        return CustomOperation;
    }(Operation));
    Operations.CustomOperation = CustomOperation;
    var UpdateMonitoredAssetOperation = /** @class */ (function (_super) {
        __extends(UpdateMonitoredAssetOperation, _super);
        function UpdateMonitoredAssetOperation(params) {
            var _this = this;
            var type = Object.assign({}, params);
            _this = _super.call(this, OperationName.update_monitored_asset_operation, type) || this;
            return _this;
        }
        UpdateMonitoredAssetOperation.getPrototype = function () {
            return prototype.UpdateMonitoredAssetPrototype.getPrototype();
        };
        return UpdateMonitoredAssetOperation;
    }(Operation));
    Operations.UpdateMonitoredAssetOperation = UpdateMonitoredAssetOperation;
})(Operations = exports.Operations || (exports.Operations = {}));
//# sourceMappingURL=transaction.js.map