"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module SeedingModule
 */
var ApiModule_1 = require("./ApiModule");
var database_1 = require("../api/model/database");
var seeding_1 = require("../model/seeding");
var SeedingModule = /** @class */ (function (_super) {
    __extends(SeedingModule, _super);
    function SeedingModule(dbApi) {
        return _super.call(this, { dbApi: dbApi }) || this;
    }
    /**
     * List active seeders, ordered by price per MB.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a0fb24b59633fe48d8d4ff0bec4412f7b
     *
     * @param {number} limit            Limit result size. Default 100(Max)
     * @returns {Promise<Seeder[]>}     List of Seeder objects.
     */
    SeedingModule.prototype.listSeedersByPrice = function (limit) {
        var _this = this;
        if (limit === void 0) { limit = 100; }
        return new Promise(function (resolve, reject) {
            var operation = new database_1.DatabaseOperations.ListSeeders(limit);
            _this.dbApi.execute(operation)
                .then(function (res) { return resolve(res); })
                .catch(function (err) { return reject(_this.handleError(seeding_1.SeedingError.database_operation_failed, err)); });
        });
    };
    /**
     * List active seeders, ordered by amount of data uploaded to buyers.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a9d0dd50b30bc28256d0df7538050e982
     *
     * @param {number} limit            Limit result size. Default 100(Max)
     * @returns {Promise<Seeder[]>}     List of Seeder objects.
     */
    SeedingModule.prototype.listSeedersByUpload = function (limit) {
        var _this = this;
        if (limit === void 0) { limit = 100; }
        return new Promise(function (resolve, reject) {
            var operation = new database_1.DatabaseOperations.ListSeedersByUpload(limit);
            _this.dbApi.execute(operation)
                .then(function (res) { return resolve(res); })
                .catch(function (err) { return reject(_this.handleError(seeding_1.SeedingError.database_operation_failed, err)); });
        });
    };
    /**
     * List active seeders, ordered by region code.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a69c457b76e2cee7fd12d2ca9dcd2eeec
     *
     * @param {number} limit            Limit result size. Default 100(Max)
     * @returns {Promise<Seeder[]>}     List of Seeder objects.
     */
    SeedingModule.prototype.listSeedersByRegion = function (region) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var operation = new database_1.DatabaseOperations.ListSeedersByRegion(region);
            _this.dbApi.execute(operation)
                .then(function (res) { return resolve(res); })
                .catch(function (err) { return reject(_this.handleError(seeding_1.SeedingError.database_operation_failed, err)); });
        });
    };
    /**
     * List active seeders, ordered by rating.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#ad3d507bb48ec37b4cf1ebd75f4a8531a
     *
     * @param {number} limit            Limit result size. Default 100(Max)
     * @returns {Promise<Seeder[]>}     List of Seeder objects.
     */
    SeedingModule.prototype.listSeedersByRating = function (limit) {
        var _this = this;
        if (limit === void 0) { limit = 100; }
        return new Promise(function (resolve, reject) {
            var operation = new database_1.DatabaseOperations.ListSeedersByRating(limit);
            _this.dbApi.execute(operation)
                .then(function (res) { return resolve(res); })
                .catch(function (err) { return reject(_this.handleError(seeding_1.SeedingError.database_operation_failed, err)); });
        });
    };
    return SeedingModule;
}(ApiModule_1.ApiModule));
exports.SeedingModule = SeedingModule;
//# sourceMappingURL=seeding.js.map