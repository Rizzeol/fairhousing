"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var database_1 = require("../api/model/database");
var explorer_1 = require("../model/explorer");
var ApiModule_1 = require("./ApiModule");
var ExplorerModule = /** @class */ (function (_super) {
    __extends(ExplorerModule, _super);
    function ExplorerModule(databaseApi) {
        return _super.call(this, {
            dbApi: databaseApi
        }) || this;
    }
    ExplorerModule.prototype.getDatabaseObject = function (space, type, id) {
        return __awaiter(this, void 0, void 0, function () {
            var operation, objects, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        operation = new database_1.DatabaseOperations.GetObjects([space + "." + type + "." + id]);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.dbApi.execute(operation)];
                    case 2:
                        objects = _a.sent();
                        if (objects.length > 0) {
                            return [2 /*return*/, objects[0]];
                        }
                        else {
                            return [2 /*return*/, null];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get object from DCore network
     *
     * @param {string} objectId     Object id. In format 'X.Y.Z'.
     * @returns {Promise<any>}      Desired object.
     */
    ExplorerModule.prototype.getObject = function (objectId) {
        var _this = this;
        var operation = new database_1.DatabaseOperations.GetObjects([objectId]);
        return new Promise(function (resolve, reject) {
            _this.dbApi.execute(operation)
                .then(function (res) {
                if (res.length > 0) {
                    resolve(res[0]);
                }
                else {
                    resolve(null);
                }
            })
                .catch(function (err) {
                reject(err);
            });
        });
    };
    ExplorerModule.prototype.hasIdCorrectFormat = function (id, first, second) {
        var parts = id.split('.').map(Number);
        return (parts.length === 3 && parts[0] === first && parts[1] === second);
    };
    ExplorerModule.prototype.getLastPartOfId = function (id) {
        return Number(id.split('.')[2]);
    };
    /**
     * Get account object.
     *
     * @param {string} id           Account id in format '1.2.X'.
     * @returns {Promise<Account>}  Account object.
     */
    ExplorerModule.prototype.getAccount = function (id) {
        var _this = this;
        if (this.hasIdCorrectFormat(id, explorer_1.Space.protocol_ids, explorer_1.Type.Protocol.account)) {
            return this.getDatabaseObject(explorer_1.Space.protocol_ids, explorer_1.Type.Protocol.account, this.getLastPartOfId(id));
        }
        return new Promise(function (resolve, reject) {
            reject(_this.handleError(explorer_1.ErrorExplorer.wrong_id_error, "Wrong id! Id should be in format: " + explorer_1.Space.protocol_ids + "." + explorer_1.Type.Protocol.account + ".X"));
        });
    };
    /**
     * Get asset object.
     *
     * @param {number} id               Asset id in format '1.3.X'.
     * @returns {Promise<Block.Asset>}  Asset object.
     */
    ExplorerModule.prototype.getAsset = function (id) {
        var _this = this;
        if (this.hasIdCorrectFormat(id, explorer_1.Space.protocol_ids, explorer_1.Type.Protocol.asset)) {
            return this.getDatabaseObject(explorer_1.Space.protocol_ids, explorer_1.Type.Protocol.asset, this.getLastPartOfId(id));
        }
        return new Promise(function (resolve, reject) {
            reject(_this.handleError(explorer_1.ErrorExplorer.wrong_id_error, "Wrong id! Id should be in format: " + explorer_1.Space.protocol_ids + "." + explorer_1.Type.Protocol.asset + ".X"));
        });
    };
    /**
     * Get miner object.
     *
     * @param {number} id               Miner id in format '1.4.X'.
     * @returns {Promise<Block.Miner>}  Miner object.
     */
    ExplorerModule.prototype.getWitness = function (id) {
        var _this = this;
        if (this.hasIdCorrectFormat(id, explorer_1.Space.protocol_ids, explorer_1.Type.Protocol.miner)) {
            return this.getDatabaseObject(explorer_1.Space.protocol_ids, explorer_1.Type.Protocol.miner, this.getLastPartOfId(id));
        }
        return new Promise(function (resolve, reject) {
            reject(_this.handleError(explorer_1.ErrorExplorer.wrong_id_error, "Wrong id! Id should be in format: " + explorer_1.Space.protocol_ids + "." + explorer_1.Type.Protocol.miner + ".X"));
        });
    };
    /**
     * Get list of history objects.
     * @param {number} id                       History id in format '1.7.X'.
     * @returns {Promise<Block.Transaction>}
     */
    ExplorerModule.prototype.getOperationHistory = function (id) {
        var _this = this;
        if (this.hasIdCorrectFormat(id, explorer_1.Space.protocol_ids, explorer_1.Type.Protocol.operation_history)) {
            return this.getDatabaseObject(explorer_1.Space.protocol_ids, explorer_1.Type.Protocol.operation_history, this.getLastPartOfId(id));
        }
        return new Promise(function (resolve, reject) {
            reject(_this.handleError(explorer_1.ErrorExplorer.wrong_id_error, "Wrong id! Id should be in format: " + explorer_1.Space.protocol_ids + "." + explorer_1.Type.Protocol.operation_history + ".X"));
        });
    };
    /**
     * Get vesting balance object.
     *
     * @param {number} id                       Vesting balance id in format '1.9.X'.
     * @returns {Promise<Block.VestingBalance>}
     */
    ExplorerModule.prototype.getVestingBalance = function (id) {
        var _this = this;
        if (this.hasIdCorrectFormat(id, explorer_1.Space.protocol_ids, explorer_1.Type.Protocol.vesting_balance)) {
            return this.getDatabaseObject(explorer_1.Space.protocol_ids, explorer_1.Type.Protocol.vesting_balance, this.getLastPartOfId(id));
        }
        return new Promise(function (resolve, reject) {
            reject(_this.handleError(explorer_1.ErrorExplorer.wrong_id_error, "Wrong id! Id should be in format: " + explorer_1.Space.protocol_ids + "." + explorer_1.Type.Protocol.vesting_balance + ".X"));
        });
    };
    /**
     * Get DCore network global properties object.
     *
     * @returns {Promise<Block.GlobalProperty>}     GlobalProperty object.
     */
    ExplorerModule.prototype.getGlobalProperty = function () {
        return this.getDatabaseObject(explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.global_property, 0);
    };
    /**
     * Get DCore network dynamic properties object.
     *
     * @returns {Promise<Block.DynamicGlobalProperty>}  DynamicGlobalProperty object.
     */
    ExplorerModule.prototype.getDynamicGlobalProperty = function () {
        return this.getDatabaseObject(explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.dynamic_global_property, 0);
    };
    /**
     * Get asset dynamic data property object.
     *
     * @param {number} id                               Asset balance id in format '2.3.X'.
     * @returns {Promise<Block.AssetDynamicProperty>}   AssetDynamicProperty object.
     */
    ExplorerModule.prototype.getAssetDynamicDataType = function (id) {
        var _this = this;
        if (this.hasIdCorrectFormat(id, explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.asset_dynamic_data_type)) {
            return this.getDatabaseObject(explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.asset_dynamic_data_type, this.getLastPartOfId(id));
        }
        return new Promise(function (resolve, reject) {
            reject(_this.handleError(explorer_1.ErrorExplorer.wrong_id_error, "Wrong id! Id should be in format: " + explorer_1.Space.implementation_ids + "." + explorer_1.Type.Implementation.asset_dynamic_data_type + ".X"));
        });
    };
    /**
     * Get account balance object.
     *
     * @param {number} id                           Account balance id in format '2.4.X'.
     * @returns {Promise<Block.AccountBalance>}     AccountBalance object.
     */
    ExplorerModule.prototype.getAccountBalance = function (id) {
        var _this = this;
        if (this.hasIdCorrectFormat(id, explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.account_balance)) {
            return this.getDatabaseObject(explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.account_balance, this.getLastPartOfId(id));
        }
        return new Promise(function (resolve, reject) {
            reject(_this.handleError(explorer_1.ErrorExplorer.wrong_id_error, "Wrong id! Id should be in format: " + explorer_1.Space.implementation_ids + "." + explorer_1.Type.Implementation.account_balance + ".X"));
        });
    };
    /**
     * Get account statistics object.
     *
     * @param {number} id                           Account statistics id in format '2.5.X'.
     * @returns {Promise<Block.AccountStatistics>}  AccountStatistics object.
     */
    ExplorerModule.prototype.getAccountStatistics = function (id) {
        var _this = this;
        if (this.hasIdCorrectFormat(id, explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.account_statistics)) {
            return this.getDatabaseObject(explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.account_statistics, this.getLastPartOfId(id));
        }
        return new Promise(function (resolve, reject) {
            reject(_this.handleError(explorer_1.ErrorExplorer.wrong_id_error, "Wrong id! Id should be in format: " + explorer_1.Space.implementation_ids + "." + explorer_1.Type.Implementation.account_statistics + ".X"));
        });
    };
    /**
     * Get block summary object.
     *
     * @param {number} id                       Block summary id in format '2.7.X'.
     * @returns {Promise<Block.BlockSummary>}
     */
    ExplorerModule.prototype.getBlockSummary = function (id) {
        var _this = this;
        if (this.hasIdCorrectFormat(id, explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.block_summary)) {
            return this.getDatabaseObject(explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.block_summary, this.getLastPartOfId(id));
        }
        return new Promise(function (resolve, reject) {
            reject(_this.handleError(explorer_1.ErrorExplorer.wrong_id_error, "Wrong id! Id should be in format: " + explorer_1.Space.implementation_ids + "." + explorer_1.Type.Implementation.block_summary + ".X"));
        });
    };
    /**
     * Get list of account's transaction history objects.
     *
     * @param {number} id                                   Account transaction history id in format '2.8.X'.
     * @returns {Promise<Block.AccountTransactionHistory>}  List of account transaction history objects.
     */
    ExplorerModule.prototype.getAccountTransactionHistory = function (id) {
        var _this = this;
        if (this.hasIdCorrectFormat(id, explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.account_transaction_history)) {
            return this.getDatabaseObject(explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.account_transaction_history, this.getLastPartOfId(id));
        }
        return new Promise(function (resolve, reject) {
            reject(_this.handleError(explorer_1.ErrorExplorer.wrong_id_error, "Wrong id! Id should be in format: " + explorer_1.Space.implementation_ids + "." + explorer_1.Type.Implementation.account_transaction_history + ".X"));
        });
    };
    /**
     * Get chain property.
     *
     * @param {number} id                       Chain property id in format '2.9.X'.
     * @returns {Promise<Block.ChainProperty>}  ChainProperty object.
     */
    ExplorerModule.prototype.getChainProperty = function (id) {
        var _this = this;
        if (this.hasIdCorrectFormat(id, explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.chain_property)) {
            return this.getDatabaseObject(explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.chain_property, this.getLastPartOfId(id));
        }
        return new Promise(function (resolve, reject) {
            reject(_this.handleError(explorer_1.ErrorExplorer.wrong_id_error, "Wrong id! Id should be in format: " + explorer_1.Space.implementation_ids + "." + explorer_1.Type.Implementation.chain_property + ".X"));
        });
    };
    /**
     * Get miner's schedule object.
     *
     * @param {number} id                       Miner schedule id in format '2.10.X'.
     * @returns {Promise<Block.MinerSchedule>}  Miner schedule object.
     */
    ExplorerModule.prototype.getMinerSchedule = function (id) {
        var _this = this;
        if (this.hasIdCorrectFormat(id, explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.miner_schedule)) {
            return this.getDatabaseObject(explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.miner_schedule, this.getLastPartOfId(id));
        }
        return new Promise(function (resolve, reject) {
            reject(_this.handleError(explorer_1.ErrorExplorer.wrong_id_error, "Wrong id! Id should be in format: " + explorer_1.Space.implementation_ids + "." + explorer_1.Type.Implementation.miner_schedule + ".X"));
        });
    };
    /**
     * Get budget record object
     *
     * @param {number} id                       Budget record id in format '2.11.X'.
     * @returns {Promise<Block.BudgetReport>}   Budget record object.
     */
    ExplorerModule.prototype.getBudgetRecord = function (id) {
        var _this = this;
        if (this.hasIdCorrectFormat(id, explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.budget_record)) {
            return this.getDatabaseObject(explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.budget_record, this.getLastPartOfId(id));
        }
        return new Promise(function (resolve, reject) {
            reject(_this.handleError(explorer_1.ErrorExplorer.wrong_id_error, "Wrong id! Id should be in format: " + explorer_1.Space.implementation_ids + "." + explorer_1.Type.Implementation.budget_record + ".X"));
        });
    };
    /**
     * Get buying object.
     *
     * @param {number} id                   Buying object id in format '2.12.X'.
     * @returns {Promise<Block.Buying>}     Buying object.
     */
    ExplorerModule.prototype.getBuying = function (id) {
        var _this = this;
        if (this.hasIdCorrectFormat(id, explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.buying)) {
            return this.getDatabaseObject(explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.buying, this.getLastPartOfId(id));
        }
        return new Promise(function (resolve, reject) {
            reject(_this.handleError(explorer_1.ErrorExplorer.wrong_id_error, "Wrong id! Id should be in format: " + explorer_1.Space.implementation_ids + "." + explorer_1.Type.Implementation.buying + ".X"));
        });
    };
    /**
     * Get content object.
     *
     * @param {number} id                   Content object id in format '2.13.X'.
     * @returns {Promise<Block.Content>}    Content object.
     */
    ExplorerModule.prototype.getContent = function (id) {
        var _this = this;
        if (this.hasIdCorrectFormat(id, explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.content)) {
            return this.getDatabaseObject(explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.content, this.getLastPartOfId(id));
        }
        return new Promise(function (resolve, reject) {
            reject(_this.handleError(explorer_1.ErrorExplorer.wrong_id_error, "Wrong id! Id should be in format: " + explorer_1.Space.implementation_ids + "." + explorer_1.Type.Implementation.content + ".X"));
        });
    };
    /**
     * Get publisher object.
     *
     * @param {number} id                   Publisher object id in format '2.14.X'.
     * @returns {Promise<Block.Publisher>}  Publisher object.
     */
    ExplorerModule.prototype.getPublisher = function (id) {
        var _this = this;
        if (this.hasIdCorrectFormat(id, explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.publisher)) {
            return this.getDatabaseObject(explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.publisher, this.getLastPartOfId(id));
        }
        return new Promise(function (resolve, reject) {
            reject(_this.handleError(explorer_1.ErrorExplorer.wrong_id_error, "Wrong id! Id should be in format: " + explorer_1.Space.implementation_ids + "." + explorer_1.Type.Implementation.publisher + ".X"));
        });
    };
    /**
     * Get subscription object.
     *
     * @param {number} id                       Subscription object id in format '2.15.X'.
     * @returns {Promise<Block.Subscription>}   Subscription object.
     */
    ExplorerModule.prototype.getSubscription = function (id) {
        var _this = this;
        if (this.hasIdCorrectFormat(id, explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.subscription)) {
            return this.getDatabaseObject(explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.subscription, this.getLastPartOfId(id));
        }
        return new Promise(function (resolve, reject) {
            reject(_this.handleError(explorer_1.ErrorExplorer.wrong_id_error, "Wrong id! Id should be in format: " + explorer_1.Space.implementation_ids + "." + explorer_1.Type.Implementation.subscription + ".X"));
        });
    };
    /**
     * Get seeding statistics object.
     *
     * @param {number} id                           Seeding statistics object id in format '2.16.X'.
     * @returns {Promise<Block.SeedingStatistics>}  SeedingStatistics object.
     */
    ExplorerModule.prototype.getSeedingStatistics = function (id) {
        var _this = this;
        if (this.hasIdCorrectFormat(id, explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.seeding_statistics)) {
            return this.getDatabaseObject(explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.seeding_statistics, this.getLastPartOfId(id));
        }
        return new Promise(function (resolve, reject) {
            reject(_this.handleError(explorer_1.ErrorExplorer.wrong_id_error, "Wrong id! Id should be in format: " + explorer_1.Space.implementation_ids + "." + explorer_1.Type.Implementation.seeding_statistics + ".X"));
        });
    };
    /**
     * Get transaction detail object.
     *
     * @param {number} id                           Transaction detail object id in format '2.17.X'.
     * @returns {Promise<Block.TransactionDetail>}  TransactionDetail object.
     */
    ExplorerModule.prototype.getTransactionDetail = function (id) {
        var _this = this;
        if (this.hasIdCorrectFormat(id, explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.transaction_detail)) {
            return this.getDatabaseObject(explorer_1.Space.implementation_ids, explorer_1.Type.Implementation.transaction_detail, this.getLastPartOfId(id));
        }
        return new Promise(function (resolve, reject) {
            reject(_this.handleError(explorer_1.ErrorExplorer.wrong_id_error, "Wrong id! Id should be in format: " + explorer_1.Space.implementation_ids + "." + explorer_1.Type.Implementation.transaction_detail + ".X"));
        });
    };
    /**
     * Get block object.
     *
     * @param {number} id                   Block number.
     * @returns {Promise<Block.Block>}      Block object.
     */
    ExplorerModule.prototype.getBlock = function (id) {
        var operation = new database_1.DatabaseOperations.GetBlock(id);
        return this.dbApi.execute(operation);
    };
    /**
     * Get blocks objects.
     *
     * @param {number} id                       Blocks start number to start list from.
     * @param {number} count                    Number of block to be listed in result.
     * @returns {Promise<Array<Block.Block>>}   List of Block objects.
     */
    ExplorerModule.prototype.getBlocks = function (id, count) {
        var promises = [];
        for (var i = 0; i < count; i++) {
            promises.push(this.getBlock(i));
        }
        return Promise.all(promises);
    };
    /**
     * Get number of accounts existing in DCore network.
     *
     * @returns {Promise<number>}   Number of accounts.
     */
    ExplorerModule.prototype.getAccountCount = function () {
        var operation = new database_1.DatabaseOperations.GetAccountCount();
        return this.dbApi.execute(operation);
    };
    /**
     * Get accounts objects.
     *
     * @param {number} ids                  Account ids in format '1.2.X'.
     * @returns {Promise<Array<Account>>}   List of account objects.
     */
    ExplorerModule.prototype.getAccounts = function (ids) {
        var operation = new database_1.DatabaseOperations.GetAccounts(ids);
        return this.dbApi.execute(operation);
    };
    /**
     * Get transaction object.
     *
     * @param {number} blockNo                  Block number.
     * @param {number} txNum                    Transaction number.
     * @returns {Promise<Block.Transaction>}    Transaction object.
     */
    ExplorerModule.prototype.getTransaction = function (blockNo, txNum) {
        var operation = new database_1.DatabaseOperations.GetTransaction(blockNo, txNum);
        return this.dbApi.execute(operation);
    };
    /**
     * Get list of miners objects.
     *
     * @deprecated This method will be removed in next release
     * @param {string} fromId               Miner id to start from, last part of id -> X from '1.4.X'. Default '0.0.0' -> List from start
     * @param {number} limit                Limit result list. Default 100(Max)
     * @returns {Promise<Array<Miner>>}
     */
    ExplorerModule.prototype.listMiners = function (fromId, limit) {
        var _this = this;
        if (fromId === void 0) { fromId = '0.0.0'; }
        if (limit === void 0) { limit = 100; }
        return new Promise(function (resolve, reject) {
            var operation = new database_1.DatabaseOperations.LookupMiners(fromId, limit);
            _this.dbApi.execute(operation)
                .then(function (res) {
                var ids = res.map(function (el) { return el[1]; });
                _this.getMiners(ids)
                    .then(function (res) {
                    resolve(res);
                })
                    .catch(function (err) { return reject(err); });
            })
                .catch(function (err) { return reject(err); });
        });
    };
    /**
     * Get miners objects.
     *
     * @param {number[]} ids                List of miner ids in format '1.4.X'.
     * @returns {Promise<Array<Miner>>}     List of miner objects.
     */
    ExplorerModule.prototype.getMiners = function (ids) {
        var _this = this;
        var op = new database_1.DatabaseOperations.GetMiners(ids);
        return new Promise(function (resolve, reject) {
            _this.dbApi.execute(op)
                .then(function (res) { return resolve(res); })
                .catch(function (err) { return reject(err); });
        });
    };
    /**
     * Get miner object.
     *
     * @param {number} id                   Miner id in format '2.8.X'.
     * @returns {Promise<Miner | null>}     Miner object
     */
    ExplorerModule.prototype.getMiner = function (id) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.getMiners([id])
                .then(function (res) {
                resolve(res.length > 0 ? res[0] : null);
            })
                .catch(function (err) { return reject(err); });
        });
    };
    /**
     * Get number of miners on DCore network.
     *
     * @returns {Promise<number>}   Number of miners.
     */
    ExplorerModule.prototype.getMinerCount = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var operation = new database_1.DatabaseOperations.GetMinerCount();
            _this.dbApi.execute(operation)
                .then(function (res) { return resolve(res); })
                .catch(function (err) { return reject(err); });
        });
    };
    /**
     * Get head block time.
     *
     * @returns {Promise<string>}   Head block time.
     */
    ExplorerModule.prototype.getHeadBlockTime = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.getDynamicGlobalProperty()
                .then(function (res) { return resolve(res.time); })
                .catch(function (err) { return reject(err); });
        });
    };
    return ExplorerModule;
}(ApiModule_1.ApiModule));
exports.ExplorerModule = ExplorerModule;
//# sourceMappingURL=explorer.js.map