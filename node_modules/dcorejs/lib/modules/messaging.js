"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module MessagingModule
 */
var ApiModule_1 = require("./ApiModule");
var transaction_1 = require("../model/transaction");
var transactionBuilder_1 = require("../transactionBuilder");
var utils_1 = require("../utils");
var database_1 = require("../api/model/database");
var crypt_1 = require("../crypt");
var messaging_1 = require("../model/messaging");
var messaging_2 = require("../api/model/messaging");
var MessagingModule = /** @class */ (function (_super) {
    __extends(MessagingModule, _super);
    function MessagingModule(dbApi, messageApi) {
        return _super.call(this, {
            dbApi: dbApi,
            messagingApi: messageApi
        }) || this;
    }
    /**
     * List sent messages.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#a2e9a6ada3838f085342b101dd2011b03
     *
     * @param {string} sender                       Account id of sender, in format '1.2.X'. Example '1.2.345'.
     * @param {string} decryptPrivateKey            Private key for memo decryption. Default is ''. Therefore none of messages is decrypted.
     * @param {number} count                        Limit result size. Default 100(Max).
     * @returns {Promise<DCoreMessagePayload[]>}    List of DCoreMessagePayload objects.
     */
    MessagingModule.prototype.getSentMessages = function (sender, decryptPrivateKey, count) {
        var _this = this;
        if (decryptPrivateKey === void 0) { decryptPrivateKey = ''; }
        if (count === void 0) { count = 100; }
        return new Promise((function (resolve, reject) {
            _this.getMessageObjects(sender, null, decryptPrivateKey, count)
                .then(function (messages) {
                resolve(messages);
            })
                .catch(function (err) { return reject(_this.handleError(messaging_1.MessagingError.query_execution_failed, err)); });
        }));
    };
    /**
     * List messages.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#a810a737e6edae4bfb28e89f47833a54b
     *
     * @param {string} receiver                     Account id of receiver, in format '1.2.X'. Example '1.2.345'.
     * @param {string} decryptPrivateKey            Private key to sign transaction.
     * @param {number} count                        Limit result size. Default 100(Max).
     * @returns {Promise<DCoreMessagePayload[]>}    List of DCoreMessagePayload objects.
     */
    MessagingModule.prototype.getMessages = function (receiver, decryptPrivateKey, count) {
        var _this = this;
        if (decryptPrivateKey === void 0) { decryptPrivateKey = ''; }
        if (count === void 0) { count = 100; }
        return new Promise((function (resolve, reject) {
            _this.getMessageObjects(null, receiver, decryptPrivateKey, count)
                .then(function (messages) {
                resolve(messages);
            })
                .catch(function (err) { return reject(_this.handleError(messaging_1.MessagingError.query_execution_failed, err)); });
        }));
    };
    /**
     * List message objects.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#a7cb689db3eeba6eb74ea2920d5c96236
     *
     * @param {string} sender                       Account id of sender, in format '1.2.X'. Example '1.2.345'.
     * @param {string} receiver                     Account id of receiver, in format '1.2.X'. Example '1.2.345'.
     * @param {string} decryptPrivateKey            Private key to decrypt messages content.
     * @param {number} count                        Limit result count. Default 100(Max)
     * @returns {Promise<DCoreMessagePayload[]>}    List of DCoreMessagePayload message objects.
     */
    MessagingModule.prototype.getMessageObjects = function (sender, receiver, decryptPrivateKey, count) {
        var _this = this;
        if (decryptPrivateKey === void 0) { decryptPrivateKey = ''; }
        if (count === void 0) { count = 100; }
        return new Promise((function (resolve, reject) {
            var op = new messaging_2.MessagingOperations.GetMessageObjects(sender, receiver, count);
            _this.messagingApi.execute(op)
                .then(function (messages) {
                resolve(_this.decryptMessages(messages, decryptPrivateKey));
            })
                .catch(function (err) { return reject(_this.handleError(messaging_1.MessagingError.query_execution_failed, err)); });
        }));
    };
    MessagingModule.prototype.decryptMessages = function (messages, decryptPrivateKey) {
        var result = [].concat(messages);
        result.map(function (msg) {
            if (msg.receivers_data.length !== 0) {
                try {
                    msg.text = crypt_1.CryptoUtils.decryptWithChecksum(msg.receivers_data[0].data, utils_1.KeyPrivate.fromWif(decryptPrivateKey), utils_1.KeyPublic.fromString(msg.receivers_data[0].receiver_pubkey), msg.receivers_data[0].nonce).toString('utf-8');
                }
                catch (e) {
                    msg.text = '';
                }
            }
            else {
                msg.text = '';
            }
        });
        return result;
    };
    /**
     * Send encrypted message
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#ab7e7eed9c157ff1c352c2179501b36c6
     *
     * @param {string} sender           Account id of sender, in format '1.2.X'. Example '1.2.345'.
     * @param {string} receiverId       Account id of receiver, in format '1.2.X'. Example '1.2.345'.
     * @param {string} message          Content of message.
     * @param {string} privateKey       Private key to encrypt message and sign transaction.
     * @returns {Promise<boolean>}      Value confirming successful transaction broadcasting.
     */
    MessagingModule.prototype.sendMessage = function (sender, receiverId, message, privateKey) {
        var _this = this;
        return new Promise((function (resolve, reject) {
            var getAccOp = new database_1.DatabaseOperations.GetAccounts([receiverId]);
            _this.dbApi.execute(getAccOp)
                .then(function (accounts) {
                if (!accounts || !accounts[0]) {
                    reject(_this.handleError(messaging_1.MessagingError.account_does_not_exist));
                    return;
                }
                var toAccount = accounts[0];
                var messagePayload = {
                    from: sender,
                    pub_from: utils_1.KeyPrivate.fromWif(privateKey).getPublicKey().stringKey,
                    receivers_data: [
                        {
                            to: receiverId,
                            pub_to: toAccount.options.memo_key,
                            nonce: Number(utils_1.Utils.generateNonce()),
                            data: ''
                        }
                    ]
                };
                var encryptedMsg = crypt_1.CryptoUtils.encryptWithChecksum(message, utils_1.KeyPrivate.fromWif(privateKey), utils_1.KeyPublic.fromString(toAccount.options.memo_key), messagePayload.receivers_data[0].nonce.toString());
                messagePayload.receivers_data[0].data = encryptedMsg.toString('hex');
                var buffer = new Buffer(JSON.stringify(messagePayload)).toString('hex');
                var customOp = new transaction_1.Operations.CustomOperation(sender, [sender], messaging_1.CustomOperationSubtype.messaging, buffer);
                var transaction = new transactionBuilder_1.TransactionBuilder();
                var added = transaction.addOperation(customOp);
                if (added === '') {
                    transaction.broadcast(privateKey)
                        .then(function (res) { return resolve(true); })
                        .catch(function (err) { return reject(_this.handleError(messaging_1.MessagingError.query_execution_failed)); });
                }
                else {
                    reject(_this.handleError(messaging_1.MessagingError.syntactic_error, added));
                    return;
                }
            })
                .catch(function (err) { return console.log(err); });
        }));
    };
    return MessagingModule;
}(ApiModule_1.ApiModule));
exports.MessagingModule = MessagingModule;
//# sourceMappingURL=messaging.js.map