"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module SeedingModule
 */
var ApiModule_1 = require("./ApiModule");
var database_1 = require("../api/model/database");
var subscription_1 = require("../model/subscription");
var transaction_1 = require("../model/transaction");
var transactionBuilder_1 = require("../transactionBuilder");
var account_1 = require("../model/account");
var SubscriptionModule = /** @class */ (function (_super) {
    __extends(SubscriptionModule, _super);
    function SubscriptionModule(dbApi, connector) {
        return _super.call(this, {
            dbApi: dbApi,
            apiConnector: connector
        }) || this;
    }
    /**
     * List all active subscriptions from given account id.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a732057e0cae2f15bac9ab72a8f13ec73
     *
     * @param {string} consumerId                       Account id in format '1.2.X'. Example: "1.2.345"
     * @param {number} count                            Limit of listed subscriptions. If empty, default is 100.
     * @returns {Promise<SubscriptionObject[]>}
     */
    SubscriptionModule.prototype.listActiveSubscriptionsByConsumer = function (consumerId, count) {
        var _this = this;
        if (count === void 0) { count = 100; }
        return new Promise(function (resolve, reject) {
            var operation = new database_1.DatabaseOperations.ListActiveSubscriptionsByConsumer(consumerId, count);
            _this.dbApi.execute(operation)
                .then(function (res) {
                resolve(res);
            })
                .catch(function (err) { return reject(_this.handleError(subscription_1.SubscriptionError.database_operation_failed, err)); });
        });
    };
    /**
     * List all subscriptions from given account id.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a4887c65f9c311f542d3af7202893fcd8
     *
     * @param {string} consumerId                       Account id in format '1.2.X'. Example: "1.2.345"
     * @param {number} count                            Limit of listed subscriptions. If empty, default is 100.
     * @returns {Promise<SubscriptionObject[]>}
     */
    SubscriptionModule.prototype.listSubscriptionsByConsumer = function (consumerId, count) {
        var _this = this;
        if (count === void 0) { count = 100; }
        return new Promise(function (resolve, reject) {
            var operation = new database_1.DatabaseOperations.ListSubscriptionsByConsumer(consumerId, count);
            _this.dbApi.execute(operation)
                .then(function (res) {
                resolve(res);
            })
                .catch(function (err) { return reject(_this.handleError(subscription_1.SubscriptionError.database_operation_failed, err)); });
        });
    };
    /**
     * List all active subscriptions from given account id.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a01e03e723cd880533deca48fa43fe209
     *
     * @param {string} authorId                         Account id in format '1.2.X'. Example: "1.2.345"
     * @param {number} count                            Limit of listed subscriptions. If empty, default is 100.
     * @returns {Promise<SubscriptionObject[]>}
     */
    SubscriptionModule.prototype.listActiveSubscriptionsByAuthor = function (authorId, count) {
        var _this = this;
        if (count === void 0) { count = 100; }
        return new Promise(function (resolve, reject) {
            var operation = new database_1.DatabaseOperations.ListActiveSubscriptionsByAuthor(authorId, count);
            _this.dbApi.execute(operation)
                .then(function (res) {
                resolve(res);
            })
                .catch(function (err) { return reject(_this.handleError(subscription_1.SubscriptionError.database_operation_failed, err)); });
        });
    };
    /**
     * List all subscriptions from given account id.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a46ee4050e3e2579a4c637dfeed6f883b
     *
     * @param {string} authorId                         Account id in format '1.2.X'. Example: "1.2.345"
     * @param {number} count                            Limit of listed subscriptions. If empty, default is 100.
     * @returns {Promise<SubscriptionObject[]>}
     */
    SubscriptionModule.prototype.listSubscriptionsByAuthor = function (authorId, count) {
        var _this = this;
        if (count === void 0) { count = 100; }
        return new Promise(function (resolve, reject) {
            var operation = new database_1.DatabaseOperations.ListSubscriptionsByConsumer(authorId, count);
            _this.dbApi.execute(operation)
                .then(function (res) {
                resolve(res);
            })
                .catch(function (err) { return reject(_this.handleError(subscription_1.SubscriptionError.database_operation_failed, err)); });
        });
    };
    /**
     * Subscribe to author transaction.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#a6174aa8cf4ab5066c82dde4e51808339
     *
     * @param {string} from                             Account id in format '1.2.X'. Example: "1.2.345"
     * @param {string} to                               Account id in format '1.2.X'. Example: "1.2.345"
     * @param {number} amount                           Amount that you want to subscribe with.
     * @param {string} assetId                          Id of asset that you want to subscribe with in format: '1.3.X'. Example: "1.3.0"
     * @param {string} privateKey                       Private key used to sign transaction.
     * @returns {Promise<boolean>}
     */
    SubscriptionModule.prototype.subscribeToAuthor = function (from, to, amount, assetId, privateKey) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var getAssetOperation = new database_1.DatabaseOperations.GetAssets([assetId]);
            _this.dbApi.execute(getAssetOperation)
                .then(function (assets) {
                if (assets[0] === null) {
                    reject(_this.handleError(subscription_1.SubscriptionError.asset_does_not_exist));
                    return;
                }
                var price = account_1.Asset.create(amount, assets[0]);
                var subscribeToAuthorOperation = new transaction_1.Operations.Subscribe(from, to, price);
                var transaction = new transactionBuilder_1.TransactionBuilder();
                var added = transaction.addOperation(subscribeToAuthorOperation);
                if (added === '') {
                    transaction.broadcast(privateKey)
                        .then(function (result) {
                        resolve(true);
                    })
                        .catch(function (error) {
                        reject(_this.handleError(subscription_1.SubscriptionError.transaction_broadcast_failed, error));
                    });
                }
                else {
                    reject(_this.handleError(subscription_1.SubscriptionError.syntactic_error, added));
                    return;
                }
            })
                .catch(function (error) {
                reject(_this.handleError(subscription_1.SubscriptionError.subscription_to_author_failed, error));
            });
        });
    };
    /**
     * Subscribe by author transaction.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#ab3443e059dcbd63a10338351bdbfac84
     *
     * @param {string} from                             Account id in format '1.2.X'. Example: "1.2.345"
     * @param {string} to                               Account id in format '1.2.X'. Example: "1.2.345"
     * @param {string} privateKey                       Private key used to sign transaction.
     * @returns {Promise<boolean>}
     */
    SubscriptionModule.prototype.subscribeByAuthor = function (from, to, privateKey) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.apiConnector.connect()
                .then(function (res) {
                var subscribeByAuthorOperation = new transaction_1.Operations.SubscribeByAuthor(from, to);
                var transaction = new transactionBuilder_1.TransactionBuilder();
                var added = transaction.addOperation(subscribeByAuthorOperation);
                if (added === '') {
                    transaction.broadcast(privateKey)
                        .then(function () {
                        resolve(true);
                    })
                        .catch(function (error) {
                        reject(_this.handleError(subscription_1.SubscriptionError.transaction_broadcast_failed, error));
                    });
                }
                else {
                    reject(_this.handleError(subscription_1.SubscriptionError.syntactic_error, added));
                    return;
                }
            })
                .catch(function (err) { return reject(_this.handleError(subscription_1.SubscriptionError.blockchain_connection_failed, err)); });
        });
    };
    /**
     * Set automatic renewal of subscription from given account id.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#a7efefe11ee58caad2924e874977f6003
     *
     * @param {string} accountId                            Account id in format '1.2.X'. Example: "1.2.345"
     * @param {string} subscriptionId                       Subscription id in format '1.6.X'. Example: "1.6.100"
     * @param {boolean} automaticRenewal                    True if enabled, false if disabled automatic renewal of given subscription.
     * @param {string} privateKey                           Private key used to sign transaction.
     * @returns {Promise<boolean>}
     */
    SubscriptionModule.prototype.setAutomaticRenewalOfSubscription = function (accountId, subscriptionId, automaticRenewal, privateKey) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.apiConnector.connect()
                .then(function (res) {
                var setAutomaticRenewalOperation = new transaction_1.Operations.SetAutomaticRenewalOfSubscription(accountId, subscriptionId, automaticRenewal);
                var transaction = new transactionBuilder_1.TransactionBuilder();
                var added = transaction.addOperation(setAutomaticRenewalOperation);
                if (added === '') {
                    transaction.broadcast(privateKey)
                        .then(function () {
                        resolve(true);
                    })
                        .catch(function (error) {
                        reject(_this.handleError(subscription_1.SubscriptionError.transaction_broadcast_failed, error));
                    });
                }
                else {
                    reject(_this.handleError(subscription_1.SubscriptionError.syntactic_error, added));
                    return;
                }
            })
                .catch(function (err) { return reject(_this.handleError(subscription_1.SubscriptionError.blockchain_connection_failed, err)); });
        });
    };
    /**
     * Update account with new subscription options.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#aadb6a2c911db0e578036c8d5a7da19b8
     *
     * @param {string} accountId                            Account id in format '1.2.X'. Example: "1.2.345"
     * @param {SubscriptionOptions} options                 Subscription option in format: {
     *                                                          allowSubscription: boolean;
     *                                                          subscriptionPeriod: number;
     *                                                          amount: number;
     *                                                          asset?: string;
     *                                                      }
     *                                                      Asset is optional, default is '1.3.0'. Example: {
     *                                                          allowSubscription: true,
     *                                                          subsctiptionPeriod: 30,
     *                                                          amount: 0.00000001
     *                                                      }
     * @param {string} privateKey                           Private key used to sign transaction
     * @returns {Promise<boolean>}
     */
    SubscriptionModule.prototype.setSubscription = function (accountId, options, privateKey) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var getAccountOp = new database_1.DatabaseOperations.GetAccounts([accountId]);
            if (options.allowSubscription
                && !options.amount
                && !options.subscriptionPeriod) {
                reject(_this.handleError(subscription_1.SubscriptionError.missing_options_arguments, 'To set subscription all arguments must be filled . Asset is optional.'));
                return;
            }
            _this.dbApi.execute(getAccountOp)
                .then(function (accounts) {
                var getAssetsOp = new database_1.DatabaseOperations.GetAssets([options.asset || '1.3.0']);
                _this.dbApi.execute(getAssetsOp)
                    .then(function (assets) {
                    if (!assets || !assets[0]) {
                        reject(_this.handleError(subscription_1.SubscriptionError.asset_does_not_exist));
                        return;
                    }
                    if (!accounts || !accounts[0]) {
                        reject(_this.handleError(subscription_1.SubscriptionError.account_does_not_exist));
                        return;
                    }
                    var account = accounts[0];
                    var asset = assets[0];
                    var newOptions = Object.assign({}, account.options);
                    newOptions.allow_subscription = options.allowSubscription;
                    newOptions.price_per_subscribe = account_1.Asset.create(options.amount || 0, asset);
                    newOptions.subscription_period = options.subscriptionPeriod || 0;
                    var accUpdateOp = new transaction_1.Operations.AccountUpdateOperation(accountId, account.owner, account.active, newOptions, {});
                    var transaction = new transactionBuilder_1.TransactionBuilder();
                    var added = transaction.addOperation(accUpdateOp);
                    if (added === '') {
                        transaction.broadcast(privateKey)
                            .then(function (res) { return resolve(true); })
                            .catch(function (err) { return reject(_this.handleError(subscription_1.SubscriptionError.transaction_broadcast_failed, err)); });
                    }
                    else {
                        reject(_this.handleError(subscription_1.SubscriptionError.syntactic_error, added));
                        return;
                    }
                })
                    .catch(function (err) { return reject(_this.handleError(subscription_1.SubscriptionError.asset_does_not_exist, err)); });
            })
                .catch(function (err) { return console.log(err); });
        });
    };
    return SubscriptionModule;
}(ApiModule_1.ApiModule));
exports.SubscriptionModule = SubscriptionModule;
//# sourceMappingURL=subscription.js.map