/**
 * @module Model/Database
 */
import { Asset } from '../../model/transaction';
export declare enum DatabaseError {
    chain_connection_failed = "chain_connection_failed",
    chain_connecting = "chain_connecting",
    database_execution_failed = "database_execution_failed",
    api_connection_failed = "api_connection_failed",
    asset_fetch_failed = "asset_fetch_failed",
}
export declare enum DatabaseOperationName {
    getAccountByName = "get_account_by_name",
    searchContent = "search_content",
    getAccounts = "get_accounts",
    searchAccountHistory = "search_account_history",
    getAccountBalances = "get_account_balances",
    generateContentKeys = "generate_content_keys",
    restoreEncryptionKey = "restore_encryption_key",
    getBuyingObjectsByConsumer = "get_buying_objects_by_consumer",
    listPublishers = "list_seeders_by_price",
    getObjects = "get_objects",
    getContent = "get_content",
    getBuyingHistoryObjects = "get_buying_by_consumer_URI",
    getGlobalProperties = "get_global_properties",
    getDynamicGlobalProperties = "get_dynamic_global_properties",
    getBlock = "get_block",
    getTransaction = "get_transaction",
    getAccountCount = "get_account_count",
    lookupMiners = "lookup_miner_accounts",
    getMiners = "get_miners",
    searchFeedback = "search_feedback",
    searchAccounts = "search_accounts",
    lookupAccounts = "lookup_accounts",
    searchMinerVoting = "search_miner_voting",
    getMinerCount = "get_miner_count",
    getOpenBuyings = "get_open_buyings",
    getOpenBuyingsByURI = "get_open_buyings_by_URI",
    getOpenBuyingsByConsumer = "get_open_buyings_by_consumer",
    getBuyingHistoryObjectsByConsumer = "get_buying_history_objects_by_consumer",
    getBuyingByConsumerURI = "get_buying_by_consumer_URI",
    listActiveSubscriptionsByConsumer = "list_active_subscriptions_by_consumer",
    listSubscriptionsByConsumer = "list_subscriptions_by_consumer",
    listActiveSubscriptionsByAuthor = "list_active_subscriptions_by_author",
    listSubscriptionsByAuthor = "list_subscriptions_by_author",
    listSeedersByUpload = "list_seeders_by_upload",
    listSeedersByRegion = "list_seeders_by_region",
    listSeedersByRating = "list_seeders_by_rating",
    getVestingBalances = "get_vesting_balances",
    listAssets = "list_assets",
    getAssets = "get_assets",
    priceToDct = "price_to_dct",
    getFeedsByMiner = "get_feeds_by_miner",
    getRealSupply = "get_real_supply",
    getProposedTransactions = "get_proposed_transactions",
}
export declare class DatabaseOperation {
    protected _name: DatabaseOperationName;
    protected _parameters: any[];
    readonly name: string;
    readonly parameters: any[];
    constructor(name: DatabaseOperationName, ...params: any[]);
}
export declare enum SearchParamsOrder {
    authorAsc = "+author",
    ratingAsc = "+rating",
    sizeAsc = "+size",
    priceAsc = "+price",
    createdAsc = "+created",
    expirationAsc = "+expiration",
    authorDesc = "-author",
    ratingDesc = "-rating",
    sizeDesc = "-size",
    priceDesc = "-price",
    createdDesc = "-created",
    expirationDesc = "-expiration",
}
export declare enum SearchAccountHistoryOrder {
    typeAsc = "+type",
    toAsc = "+to",
    fromAsc = "+from",
    priceAsc = "+price",
    feeAsc = "+fee",
    descriptionAsc = "+description",
    timeAsc = "+time",
    typeDesc = "-type",
    toDesc = "-to",
    fromDesc = "-from",
    priceDesc = "-price",
    feeDesc = "-fee",
    descriptionDesc = "-description",
    timeDesc = "-time",
}
export declare enum MinerOrder {
    nameAsc = "+name",
    urlAsc = "+url",
    votesAsc = "+votes",
    nameDesc = "-name",
    urlDesc = "-url",
    votesDesc = "-votes",
    none = "",
}
/**
 * Parameters for content search.
 * Order parameter options can be found in SearchParamsOrder class, Default: SearchParamsOrder.createdDesc
 * Region code is ISO 3166-1 alpha-2 two-letter region code.
 */
export interface SearchParams {
    term?: string;
    order?: SearchParamsOrder;
    /**
     * Content owner
     * @memberof SearchParams
     */
    user?: string;
    region_code?: string;
    itemId?: string;
    category?: string;
    count?: number;
}
export declare namespace DatabaseOperations {
    class SearchContent extends DatabaseOperation {
        constructor(searchParams: SearchParams);
    }
    class GetAccountByName extends DatabaseOperation {
        constructor(name: string);
    }
    class GetAccounts extends DatabaseOperation {
        constructor(ids: string[]);
    }
    class SearchAccountHistory extends DatabaseOperation {
        constructor(accountId: string, order: string, startObjecId?: string, limit?: number);
    }
    class GetAccountBalances extends DatabaseOperation {
        constructor(accountId: string, assetsId: string[]);
    }
    class RestoreEncryptionKey extends DatabaseOperation {
        constructor(contentId: string, elGamalPrivate: string);
    }
    class GenerateContentKeys extends DatabaseOperation {
        constructor(seeders: string[]);
    }
    class ListSeeders extends DatabaseOperation {
        constructor(resultSize: number);
    }
    class GetBoughtObjectsByCustomer extends DatabaseOperation {
        constructor(consumerId: string, order: string, startObjectId: string, term: string, resultSize: number);
    }
    class GetObjects extends DatabaseOperation {
        constructor(ids: string[]);
    }
    class GetContent extends DatabaseOperation {
        constructor(URI: string);
    }
    class GetBuyingHistoryObjects extends DatabaseOperation {
        constructor(accountId: string, contentURI: string);
    }
    class GetGlobalProperties extends DatabaseOperation {
        constructor();
    }
    class GetDynamicGlobalProperties extends DatabaseOperation {
        constructor();
    }
    class GetBlock extends DatabaseOperation {
        constructor(blockId: number);
    }
    class GetTransaction extends DatabaseOperation {
        constructor(blockId: number, txNumber: number);
    }
    class GetAccountCount extends DatabaseOperation {
        constructor();
    }
    class LookupMiners extends DatabaseOperation {
        constructor(startFrom: string, limit: number);
    }
    class GetMiners extends DatabaseOperation {
        constructor(minerIds: string[]);
    }
    class SearchFeedback extends DatabaseOperation {
        constructor(accountId: string, contentUri: string, startId: string, count: number);
    }
    class SearchAccounts extends DatabaseOperation {
        constructor(searchTerm: string, order: string, id: string, limit: number);
    }
    class LookupAccounts extends DatabaseOperation {
        constructor(lowerBound: string, limit: number);
    }
    class SearchMinerVoting extends DatabaseOperation {
        constructor(accountName: string, keyword: string, myVotes: boolean, sort: MinerOrder, fromMinerId: string, limit: number);
    }
    class GetMinerCount extends DatabaseOperation {
        constructor();
    }
    class GetOpenBuyings extends DatabaseOperation {
        constructor();
    }
    class GetOpenBuyingsByURI extends DatabaseOperation {
        constructor(URI: string);
    }
    class GetOpenBuyingsByConsumer extends DatabaseOperation {
        constructor(accountId: string);
    }
    class GetBuyingsHistoryObjectsByConsumer extends DatabaseOperation {
        constructor(accountId: string);
    }
    class GetBuyingByConsumerURI extends DatabaseOperation {
        constructor(accountId: string, URI: string);
    }
    class ListAssets extends DatabaseOperation {
        constructor(lowerBoundSymbol: string, limit: number);
    }
    class GetAssets extends DatabaseOperation {
        constructor(assetIds: string[]);
    }
    class PriceToDCT extends DatabaseOperation {
        constructor(asset: Asset);
    }
    class GetFeedsByMiner extends DatabaseOperation {
        constructor(accountId: string, limit: number);
    }
    class GetRealSupply extends DatabaseOperation {
        constructor();
    }
    class GetVestingBalances extends DatabaseOperation {
        constructor(accountId: string);
    }
    class ListActiveSubscriptionsByConsumer extends DatabaseOperation {
        constructor(accountId: string, limit: number);
    }
    class ListSubscriptionsByConsumer extends DatabaseOperation {
        constructor(accountId: string, limit: number);
    }
    class ListActiveSubscriptionsByAuthor extends DatabaseOperation {
        constructor(accountId: string, limit: number);
    }
    class ListSubscriptionsByAuthor extends DatabaseOperation {
        constructor(accountId: string, limit: number);
    }
    class ListSeedersByUpload extends DatabaseOperation {
        constructor(limit: number);
    }
    class ListSeedersByRegion extends DatabaseOperation {
        constructor(region: string);
    }
    class ListSeedersByRating extends DatabaseOperation {
        constructor(limit: number);
    }
    class GetProposedTransactions extends DatabaseOperation {
        constructor(accountId: string);
    }
}
