import { ApiConnector } from './apiConnector';
import { ChainSubscriptionCallback, Method } from './model/chain';
export declare class ChainApi {
    static asset: string;
    static asset_id: string;
    static DCTPower: number;
    private _apiConnector;
    private _chainStore;
    readonly chainId: string;
    /**
     * Generates random sequence of bytes
     */
    static generateNonce(): string;
    static setupChain(chainId: string, chainConfig: any): void;
    constructor(apiConnector: ApiConnector, chainStore: any);
    /**
     * Fetches data from blockchain with given chain methods.
     *
     * Returns Promise.all with resolve result as array of results
     * in order of adding into ChainMethod
     *
     * @param {ChainMethods} methods
     * @return {Promise<any[]>}
     */
    fetch(...methods: Method[]): Promise<any[]>;
    subscribe(callback: ChainSubscriptionCallback): void;
    subscribePendingTransactions(callback: ChainSubscriptionCallback): void;
    subscribeBlockApplied(callback: ChainSubscriptionCallback): void;
    private connect();
}
