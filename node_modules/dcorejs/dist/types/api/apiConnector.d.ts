export declare enum ApiConnectorError {
    ws_connection_failed = "ws_connection_failed",
}
export declare enum ConnectionState {
    open = "open",
    closed = "closed",
    reconnect = "reconnect",
    error = "error",
    unknown = "unknown",
}
/**
 * ApiConnector provide connection to dcorejs-lib apis
 *
 * @export
 * @class ApiConnector
 */
export declare class ApiConnector {
    private _connectionPromise;
    private readonly _apiAddresses;
    private readonly _api;
    private _isConnected;
    private connectedAddress;
    private testConnectionQuality;
    private connectionStatusCallback;
    readonly isConnected: boolean;
    readonly apiAddresses: string[];
    constructor(apiAddresses: string[], api: any, testConnectionQuality?: boolean, connectionStatusCallback?: (status: ConnectionState) => void);
    /**
     * Create new connection to WS interface of daemon with addresses.
     *
     * @param {string[]} addresses
     * @param api
     * @param {boolean} testConnectionQuality
     * @param {(status: ConnectionState) => void} connectionStatusCallback
     */
    private initConnetion(addresses, api, testConnectionQuality?, connectionStatusCallback?);
    /**
     * Connect DCore network daemon api using dcorejs-lib.
     *
     * @param {string[]} addresses              Addresses to connect to.
     * @param api                               Dcorejs-lib Apis object.
     * @param {boolean} testConnectionQuality   Parameter to turn on/off connection speed test. Default is 'true'.
     * @returns {Promise<any>}                  Connection promise.
     */
    private connectApi(addresses, api, testConnectionQuality);
    /**
     * Test every address connection time to determine fastest.
     * @param {string[]} addresses                  Addresses to test.
     * @returns {Promise<ConnectionTestResult[]>}   List of ConnectionTestResult.
     */
    private testConnectionTime(addresses);
    private getConnectionPromise(forAddress, api);
    /**
     * Return promise of connection. Once connection is established Promise is resolved and is able to run operations on apis.
     * Closed connection can be opened using openConnection() method.
     *
     * @returns {Promise<void>}     Connection promise.
     */
    connect(): Promise<void>;
    /**
     * Opens WS connection based on initialize configuration.
     *
     * @returns {Promise<void>}     Connection promise.
     */
    openConnection(): void;
    /**
     * Closes opened WS connection.
     */
    closeConnection(): void;
    private handleConnectionState(state, callback);
    private handleError(message, err?);
}
