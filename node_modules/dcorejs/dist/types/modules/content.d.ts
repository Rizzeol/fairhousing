import { Rating, Content, Seeder, BuyingContent, SubmitObject, ContentKeys, KeyPair } from '../model/content';
import { DatabaseApi } from '../api/database';
import { ChainApi } from '../api/chain';
import { SearchParams, SearchParamsOrder } from '../api/model/database';
import { ContentObject, Operation } from '../model/transaction';
import { ApiModule } from './ApiModule';
import { ApiConnector } from '../api/apiConnector';
export declare enum ContentError {
    database_operation_failed = "operation_failed",
    fetch_content_failed = "fetch_content_failed",
    transaction_broadcast_failed = "transaction_broadcast_failed",
    restore_content_keys_failed = "restore_content_keys_failed",
    asset_fetch_failed = "asset_fetch_failed",
    asset_not_found = "asset_not_found",
    content_not_exist = "content_not_exist",
    account_fetch_failed = "account_fetch_failed",
    parameters_error = "parameters_error",
    connection_failed = "connection_failed",
    syntactic_error = "syntactic_error",
}
/**
 * ContentApi provide methods to communication
 * with content stored in DCore network.
 */
export declare class ContentModule extends ApiModule {
    constructor(dbApi: DatabaseApi, chainApi: ChainApi, apiConnector: ApiConnector);
    /**
     * Searches content submitted to DCore network and is not expired.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a4526e41a8bf7bc921072d11cec0c894c
     *
     * @param {SearchParams} searchParams       Parameters for content filtering.
     * @param {boolean} convertAsset            Optional parameter to convert amounts and fees of Content from blockchain asset
     *                                          amount format to right precision format of asset. Example: 100000000 => 1 DCT.
     *                                          Default: false.
     * @return {Promise<Content[]>}             List of Content object that conform search parameters.
     */
    searchContent(searchParams?: SearchParams, convertAsset?: boolean): Promise<Content[]>;
    /**
     * Get content object from blockchain for given content id
     *
     * @param {string} id                   Id of content to get. Example: '2.13.345'
     * @param {boolean} convertAsset        Optional parameter to convert amounts and fees of Content from blockchain asset
     *                                      amount format to right precision format of asset. Example: 100000000 => 1 DCT.
     *                                      Default: false.
     * @return {Promise<Content | null>}    Content object.
     */
    getContent(id: string, convertAsset?: boolean): Promise<ContentObject>;
    /**
     * Get content with given URI.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a1790db302a96536fe8be9794969fbfdb
     *
     * @param {string} URI                  Content URI
     * @param {boolean} convertAsset        Optional parameter to convert amounts and fees of Content from blockchain asset
     *                                      amount format to right precision format of asset. Example: 100000000 => 1 DCT.
     *                                      Default: false.
     * @returns {Promise<Content | null>}   Content object.
     */
    getContentURI(URI: string, convertAsset?: boolean): Promise<ContentObject | null>;
    /**
     * Cancel submitted content in blockchain.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#a51951fe58f271369898d529e537bf45e
     *
     * @param {string} contentId        Content id in format '2.13.X'. Example: '2.13.1234'
     * @param {string} authorId         Author id in format'1.2.X'. Example: '1.2.345'
     * @param {string} privateKey       Author's private key to submit transaction in WIF(hex) (Wallet Import Format) format.
     * @return {Promise<void>}          Value confirming successful transaction broadcasting.
     */
    removeContent(contentId: string, authorId: string, privateKey: string): Promise<void>;
    /**
     * Restores key to decrypt downloaded content.
     *
     * ElGamalPrivate contains keys used to identify if user have bought content.
     * May contains older keys, if elGamal keys pair were changed,
     * to restore content bought before keys have been changed. Otherwise content keys
     * would not be restored.
     * https://docs.decent.ch/developer/group___database_a_p_i___decent.html#gaa952f1c2adc2781d42a3f457e2d18d09
     *
     * @param {string} contentId                Content id in format '2.13.X', Example: '2.13.453'
     * @param {string} accountId                Account if in format '1.2.X'. Example: '1.2.345'
     * @param {...string[]} elGamalKeys         El Gamal keys to identify that user bought content. May contains older keys, if el gamal
     *                                          keys pair were changed, to restore content bought before keys have been changed.
     *                                          Otherwise content keys would not be restored.
     * @returns {Promise<string>}               Content key to decrypt content.
     */
    restoreContentKeys(contentId: string, accountId: string, ...elGamalKeys: KeyPair[]): Promise<string>;
    /**
     * Generate content key with key parts of each seeder to encrypt
     * content to be uploaded.
     * https://docs.decent.ch/developer/group___database_a_p_i___decent.html#ga4efd6c44e7257d496b79b102cd3d9358
     *
     * @param {string[]} seeders        Array of seeder account ids in format '1.2.X'. Example: ['1.2.12', '1.4.13']
     * @return {Promise<ContentKeys>}   Generated ContentKeys for content encryption.
     */
    generateContentKeys(seeders: string[]): Promise<ContentKeys>;
    /**
     * Submit content to blockchain
     * https://docs.decent.ch/developer/group___wallet_a_p_i___content.html#gae0af8d611b5d915264a892ad83254370
     *
     * @param {SubmitObject} content    SubmitObject with information about submitted object.
     * @param {string} privateKey       Private for sign transaction in WIF(hex) (Wallet Import Format) format.
     * @param {boolean} broadcast
     * @return {Promise<boolean>}       Value confirming successful transaction broadcasting.
     */
    addContent(content: SubmitObject, privateKey: string, broadcast?: boolean): Promise<Operation>;
    /**
     * Get list of opened, not yet confirmed buy requests by seeders.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#ad4e75371b94ea3fd47cf4bd329b622aa
     *
     * @param {boolean} convertAsset            Optional parameter to convert amounts and fees of BuyingContent from blockchain asset
     *                                          amount format to right precision format of asset. Example: 100000000 => 1 DCT.
     *                                          Default: false.
     * @returns {Promise<BuyingContent[]>}      BuyingContent list of opened buy requests.
     */
    getOpenBuying(convertAsset?: boolean): Promise<BuyingContent[]>;
    /**
     * Get list of opened, not yet confirmed buy requests by seeders.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a030ccb8c903503a700ecbbc87bf552af
     *
     * @param {string} URI                  Buy request URI. Example 'ipfs:QmQ9MBkzt6QcDtBhg7qenDcXtm1s6VVSogtSHa2zbXKsFb'
     * @param {boolean} convertAsset        Optional parameter to convert amounts and fees of BuyingContent from blockchain asset
     *                                      amount format to right precision format of asset. Example: 100000000 => 1 DCT.
     *                                      Default: false.
     * @returns {Promise<BuyingContent[]>}  BuyingContent list of opened buy requests.
     */
    getOpenBuyingByURI(URI: string, convertAsset?: boolean): Promise<BuyingContent[]>;
    /**
     * Get list of opened, not yet confirmed buy requests by seeders.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a767fc3bb252b35c33618f12083aa3064
     *
     * @param {string} accountId            Account id in format '1.2.X'. Example '1.2.345'
     * @param {boolean} convertAsset        Optional parameter to convert amounts and fees of BuyingContent from blockchain asset
     *                                      amount format to right precision format of asset. Example: 100000000 => 1 DCT.
     *                                      Default: false.
     * @returns {Promise<BuyingContent[]>}  BuyingContent list of opened buy requests.
     */
    getOpenBuyingByConsumer(accountId: string, convertAsset?: boolean): Promise<BuyingContent[]>;
    /**
     * Get consumer's bought content identified by URI.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a0b6a59e429592430cd91c6f8c82a5d6c
     *
     * @param {string} accountId                    Consumer's account id in format '1.2.X'. Example '1.2.345'
     * @param {string} URI                          Content URI. Example 'ipfs:QmQ9MBkzt6QcDtBhg7qenDcXtm1s6VVSogtSHa2zbXKsFb'
     * @param {boolean} convertAsset                Optional parameter to convert amounts and fees of BuyingContent from blockchain asset
     *                                              amount format to right precision format of asset. Example: 100000000 => 1 DCT.
     *                                              Default: false.
     * @returns {Promise<BuyingContent[] | null>}   List of bought content with URI.
     */
    getBuyingByConsumerURI(accountId: string, URI: string, convertAsset?: boolean): Promise<BuyingContent[] | null>;
    /**
     * Bought content history of account.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a58b3b366a008ae2b0b7acd352da9969e
     *
     * @param {string} accountId            Account id in format '1.2.X'. Example '1.2.345'
     * @param {boolean} convertAsset        Optional parameter to convert amounts and fees of BuyingContent from blockchain asset
     *                                      amount format to right precision format of asset. Example: 100000000 => 1 DCT.
     *                                      Default: false.
     * @returns {Promise<BuyingContent[]>}  List of BuyingContent.
     */
    getBuyingHistoryObjectsByConsumer(accountId: string, convertAsset?: boolean): Promise<BuyingContent[]>;
    /**
     * Format price Asset amounts to asset precision.
     *
     * @param {ContentExchangeObject[]} content     List of content to format.
     * @param {DCoreAssetObject[]} assets           Complete list of assets for formatting.
     * @returns {ContentExchangeObject[]}           List of content with formatted prices.
     */
    private formatPrices(content, assets);
    /**
     * Calculate price of content submit for file size.
     *
     * @param fileSize  Size of file in bytes
     */
    private getFileSize(fileSize);
    /**
     * Calculate submit price of content based on file size, expiration date and selected seeders.
     *
     * @param content SubmitObject for content to be uploaded
     */
    private calculateFee(content);
    /**
     * Request buy content.
     * https://docs.decent.ch/developer/group___wallet_a_p_i___content.html#ga5c57a25ade4da4c36466bd12f4b65401
     *
     * @param {string} contentId        Id of content to be bought in format '2.13.X'. Example: '2.13.456'
     * @param {string} buyerId          Account id of user buying content in format '1.2.X'. Example: '1.2.345'
     * @param {string} elGammalPub      ElGammal public key which will be used to identify users bought content
     * @param {string} privateKey       Private key to sign broadcasted transaction in WIF(hex) (Wallet Import Format) format.
     * @param {boolean} broadcast
     * @return {Promise<boolean>}       Value confirming successful transaction broadcasting.
     */
    buyContent(contentId: string, buyerId: string, elGammalPub: string, privateKey: string, broadcast?: boolean): Promise<Operation>;
    /**
     * List available seeders ordered by price.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a0fb24b59633fe48d8d4ff0bec4412f7b
     *
     * @param {number} resultSize       Number of results per request. Default 100(Max)
     * @return {Promise<Seeder[]>}      List of available Seeder objects.
     */
    getSeeders(resultSize?: number): Promise<Seeder[]>;
    /**
     * Get list of not expired purchased content for account.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a9b19baba864926274ef141c879b29e28
     *
     * @param {string} accountId        Account id in format '1.2.X'. Example: '1.2.345'
     * @param {string} order            Order of returned content list. Default is SearchParamsOrder.createdDesc
     * @param {string} startObjectId    Content object id from which list starts in format '2.13.X'. Example '2.13.234'. Default '0.0.0'
     * @param {string} term             Term to search in purchased content. Default ''
     * @param {number} resultSize       Number of results. Default 100(Max)
     * @return {Promise<Content[]>}     List of purchased content.
     */
    getPurchasedContent(accountId: string, order?: SearchParamsOrder, startObjectId?: string, term?: string, resultSize?: number): Promise<Content[]>;
    /**
     * List rating for given content id.
     *
     * @param {string} contentId        Content if in format '2.13.X'. Example '2.13.456'
     * @param {string} forUser          Account id to search for user's ratings for conentnt, in format '1.2.X'. Example '1.2.345'.
     * @param {string} ratingStartId    Rating id to start list from.
     * @param {number} count
     * @return {Promise<Array<Rating>>}
     */
    getRating(contentId: string, forUser: string, ratingStartId?: string, count?: number): Promise<Array<Rating>>;
    /**
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a624e679ac58b3edfc7b817e4a46e3746
     */
    searchFeedback(accountId: string, contentURI: string, ratingStartId: string, count?: number): Promise<Array<Rating>>;
    /**
     * Get author and co-authors of content.
     *
     * @param {string} URI   Content URI. Example 'ipfs:QmQ9MBkzt6QcDtBhg7qenDcXtm1s6VVSogtSHa2zbXKsFb'
     */
    getAuthorCoAuthors(URI: string): Promise<[string, string[]] | null>;
    /**
     * Send feedback for bought content with comment.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#a34d9dc81d177f87e5f501f182cf9212f
     *
     * @param {string} contentURI       Content URI. Example 'ipfs:QmQ9MBkzt6QcDtBhg7qenDcXtm1s6VVSogtSHa2zbXKsFb'
     * @param {string} consumer         Account id in format '1.2.X'. Example '1.2.345'
     * @param {string} comment          Comment for feedback.
     * @param {number} rating           Rating number from interval 1(Bad)-5(Good).
     * @param {string} consumerPKey     Account's private key to sign transaction in WIF(hex) (Wallet Import Format) format.
     * @returns {Promise<boolean>}      Value confirming successful transaction broadcasting.
     */
    leaveCommentAndRating(contentURI: string, consumer: string, comment: string, rating: number, consumerPKey: string): Promise<boolean>;
}
