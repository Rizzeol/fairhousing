/**
 * @module AccountModule
 */
import { Account, AccountNameIdPair, Asset, HistoryRecord, MinerInfo, TransactionRecord, WalletExport, HistoryOptions, UpdateAccountParameters } from '../model/account';
import { DatabaseApi } from '../api/database';
import { ChainApi } from '../api/chain';
import { HistoryApi } from '../api/history';
import { ApiConnector } from '../api/apiConnector';
import { MinerOrder, SearchAccountHistoryOrder } from '../api/model/database';
import { Operation } from '../model/transaction';
import { ApiModule } from './ApiModule';
export declare enum AccountOrder {
    nameAsc = "+name",
    idAsc = "+id",
    nameDesc = "-name",
    idDesc = "-id",
    none = "",
}
/**
 * AccountModule is class that provides methods to obtain information from DCore node's Account module API.
 */
export declare class AccountModule extends ApiModule {
    constructor(dbApi: DatabaseApi, chainApi: ChainApi, historyApi: HistoryApi, apiConnector: ApiConnector);
    /**
     * Gets account from DCore blockchain database for given account name.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#ac5c1fd29358dcde88ec644292de59304
     *
     * @param {string} name         Account name. Example: "u123456789abcdef123456789"
     * @return {Promise<Account>}   Account object.
     */
    getAccountByName(name: string): Promise<Account>;
    /**
     * Gets account from DCore blockchain database for given account id.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#aa20a30ec92c339c1b186c4ee7825f67b
     *
     * @param {string} id           Account id in format '1.2.X'. Example: "1.2.345"
     * @return {Promise<Account>}   Account object.
     */
    getAccountById(id: string): Promise<Account>;
    /**
     * Gets history of transfer transaction for given account name.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a180dc12024aa0e60bcbdf781611680fc
     *
     * @deprecated This method will be removed in future DCore update. Use getAccountHistory or searchAccountHistory instead
     *
     * @param {string} accountId                Account id in format '1.2.X'. Example: "1.2.345"
     * @param {string} order                    Order of TransactionRecords in result. Default is .timeDesc.
     * @param {string[]} privateKeys            Array of private keys in case private/public pair has been changed in blockchain account,
     *                                          using for example cli_wallet, to be able of decrypt older memo messages from transactions.
     * @param {string} startObjectId            Id of TransactionRecord to start search from for paging purposes. Default 0.0.0
     * @param {number} resultLimit              Number of transaction history records in result. Use for paging. Default 100(max)
     * @return {Promise<TransactionRecord[]>}   List of TransactionRecord.List of TransactionRecord.
     */
    getTransactionHistory(accountId: string, privateKeys: string[], order?: SearchAccountHistoryOrder, startObjectId?: string, resultLimit?: number): Promise<TransactionRecord[]>;
    /**
     * Returns transfer operations for given account.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a180dc12024aa0e60bcbdf781611680fc
     *
     * @param {string} accountId                Account id in format '1.2.X'. Example: "1.2.345"
     * @param {string[]} privateKeys            Array of private keys in case private/public pair has been changed in blockchain account,
     *                                          using for example cli_wallet, to be able of decrypt older memo messages from transactions.
     * @param {string} order                    Order of TransactionRecords in result. Default is .timeDesc.
     * @param {string} startObjectId            Id of TransactionRecord to start search from for paging purposes. Default 0.0.0
     * @param {number} resultLimit              Number of transaction history records in result. Use for paging. Default 100(max)
     * @param {boolean} convertAssets           Optional parameter to convert amounts and fees of TransactionRecords from blockchain asset
     *                                          amount format to right precision format of asset. Example: 100000000 => 1 DCT.
     *                                          Default: false.
     * @returns {Promise<TransactionRecord[]>}  List of TransactionRecord.
     */
    searchAccountHistory(accountId: string, privateKeys: string[], order?: SearchAccountHistoryOrder, startObjectId?: string, resultLimit?: number, convertAssets?: boolean): Promise<TransactionRecord[]>;
    /**
     * Transfers amount of asset between accounts.
     * https://docs.decent.ch/developer/group___wallet_a_p_i___account.html#gae61c0c78134741c534967260c8ff8a71
     *
     * @param {number} amount           Amount of asset to be send to receiver.
     * @param {string} assetId          Id of asset that amount will be sent in. If empty, default 1.3.0 - DCT is selected
     * @param {string} fromAccount      Name or id of sender account
     * @param {string} toAccount        Name or id of receiver account
     * @param {string} memo             Message for recipient
     * @param {string} privateKey       Private key used to encrypt memo and sign transaction
     * @return {Promise<Operation>}     Value confirming successful transaction broadcasting.
     */
    transfer(amount: number, assetId: string, fromAccount: string, toAccount: string, memo: string, privateKey: string, broadcast?: boolean): Promise<Operation>;
    /**
     * Current account balance of asset on given account
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a52515490f739d3523c9d842e2e2362ef
     *
     * @param {string} accountId        Account id in format '1.2.X'. Example: '1.2.345'
     * @param {string} assetId          Id of asset in which balance will be listed
     * @param {boolean} convertAsset    Optional parameter to convert balance amount from blockchain asset
                                        amount format to right precision format of asset. Example: 100000000 => 1 DCT.
     *                                  Default: false.
     * @return {Promise<number>}        Account's balance
     */
    getBalance(accountId: string, assetId?: string, convertAsset?: boolean): Promise<number>;
    /**
     * Verifies if block in that transaction was processed to is irreversible.
     * NOTE: Unverified blocks still can be reversed.
     *
     * NOTICE:
     * Transaction object with id in form '1.7.X' can be fetched from AccountModule.getAccountHistory method.
     *
     * @param {string} accountId        Account id in format '1.2.X'. Example: '1.2.30'
     * @param {string} transactionId    Transaction id in format '1.7.X'.
     * @return {Promise<boolean>}       Returns 'true' if transaction is in irreversible block, 'false' otherwise.
     */
    isTransactionConfirmed(accountId: string, transactionId: string): Promise<boolean>;
    /**
     * List of all transaction operations in history of user.
     * NOTE: Operations can be filtered using Chain.ChainOperationType
     * https://docs.decent.ch/developer/group___history_a_p_i.html#ga2bfce814ce4adde1c30e63662f3fa18c
     *
     * @param {string} accountId                Account id in format '1.2.X'. Example: '1.2.345'
     * @param historyOptions                    Optional HistoryOptions object to configure fromId and resultLimit for paging.
     *                                          fromId: Id of HistoryRecord from what to start list from. Default: '1.7.0'
     *                                          resultLimit: Number of HistoryRecords in result. Default: 100(Max)
     *                                          NOTE: List is in DESC order. Therefore fromId of operation suppose to be last in received
     *                                          list.
     * @return {Promise<HistoryRecord[]>}       List of HistoryRecord objects.
     */
    getAccountHistory(accountId: string, historyOptions?: HistoryOptions): Promise<HistoryRecord[]>;
    /**
     * Search accounts based on given search parameters.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a57cbf9b3e799ea70b08885cc5df9b043
     *
     * @param {string} searchTerm   Term to search in account names. Default: ''
     * @param {string} order        AccountOrder to order results. Default: AccountOrder.none
     * @param {string} id           Account id to start list from. Default: '0.0.0'
     * @param {number} limit        Limit result list size. Default: 100(Max)
     * @returns {Promise<Account>}  List of filtered accounts.
     */
    searchAccounts(searchTerm?: string, order?: AccountOrder, id?: string, limit?: number): Promise<Account>;
    /**
     * Returns number of accounts created on network
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a533c834442d9e8fbaeae5eb24d4fe8c5
     *
     * @returns {Promise<number>}   Number of accounts.
     */
    getAccountCount(): Promise<number>;
    /**
     * Creates new account in DCore blockchain network.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#aed56e5dfd4dc85b40d62dd25cb1fd029
     *
     * @param {string} name                 Name of newly created account.
     * @param {string} ownerKey             Public key to be used as owner key in WIF(hex)(Wallet Import Format) format.
     * @param {string} activeKey            Public key to be used as active key in WIF(hex)(Wallet Import Format) format.
     * @param {string} memoKey              Public key used to memo encryption in WIF(hex)(Wallet Import Format) format.
     * @param {string} registrar            Registrar account id who pay account creation transaction fee.
     * @param {string} regisrarPrivateKey   Registrar private key, in WIF(hex)(Wallet Import Format) format, for account register
     *                                      transaction to be signed with.
     * @returns {Promise<boolean>}          Value confirming successful transaction broadcasting.
     */
    registerAccount(name: string, ownerKey: string, activeKey: string, memoKey: string, registrar: string, registrarPrivateKey: string, broadcast?: boolean): Promise<Operation>;
    /**
     * Create account in DCore blockchain network with keys derived from provided brain key.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#a758d05a5f090adbc249258881775d222
     *
     * NOTE: This method create account with owner, active and memo key set to same value.
     *       Recommended to use Utils.derivePrivateKey to derive keys from brainkey and then register account
     *       with option to set these keys to different values.
     *
     * @param {string} brainkey             Brain key for keys derivation. Use brain key from Utils.suggestBrainKey.
     * @param {string} accountName          Name for new account. String with alphanumerical symbols and dash. Example: 'new-account2'
     * @param {string} registrar            Registrar account id, who pay for account registration in format '1.2.X'. Example: '1.2.345'
     * @param {string} registrarPrivateKey  Registrar private key in WIF(hex)(Wallet Import Format) format.
     * @returns {Promise<boolean>}          Value confirming successful transaction broadcasting.
     */
    createAccountWithBrainkey(brainkey: string, accountName: string, registrar: string, registrarPrivateKey: string): Promise<Operation>;
    /**
     * Exports wallet-cli compatible wallet file.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#a3cb922b2d88865c509a8e2c91b7416ab
     *
     * @param {string} accountId            Account id that about to be exported, in format '1.2.X'. Example: '1.2.345'
     * @param {string} password             Password for keys structure encryption.
     * @param privateKeys                   Private keys, in WIF(hex)(Wallet Import Format) format, to be exported
     * @param additionalElGamalPrivateKeys  Additional el gamal keys, in case that has been changed over time. Primary el gamal key is
     *                                      calculated from privateKeys.
     * @returns {Promise<WalletExport>}     WalletExport object that can be serialized and used as import for cli_wallet.
     */
    exportWallet(accountId: string, password: string, privateKeys: string[], additionalElGamalPrivateKeys?: string[]): Promise<WalletExport>;
    /**
     * Fetch list of an accounts.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#abf203f3002c7e2053c33eb6cb4e147c6
     *
     * @param {string} loweBound                Account id from which accounts are listed, in format '1.2.X'. Default: ''
     * @param {number} limit                    Number of returned accounts. Default: 100(Max)
     * @returns {Promise<AccountNameIdPair>}    List of filtered AccountNameIdPairs.
     */
    listAccounts(lowerBound?: string, limit?: number): Promise<AccountNameIdPair[]>;
    /**
     * Returns account's balances in all assets account have non-zero amount in.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a52515490f739d3523c9d842e2e2362ef
     *
     * @param {string} id               Account id in format '1.2.X', Example: '1.2.345'.
     * @param {boolean} convertAssets   Optional parameter to convert balance amount from blockchain asset
     *                                  amount format to right precision format of asset. Example: 100000000 => 1 DCT. Default: false.
     * @returns {Promise<Asset[]>}      List of balances
     */
    listAccountBalances(id: string, convertAssets?: boolean): Promise<Asset[]>;
    /**
     * Search for miners with parameters.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#a6bf2da2d8f11165c8990d3a849c2dd92
     *
     * @param {string} accountName          Account name to search miners for.
     * @param {string} keyword              Search keyword.
     * @param {boolean} myVotes             Flag to search within account's voted miners.
     * @param {MinerOrder} sort             Sorting parameter of search results.
     * @param {string} fromMinerId          Miner id to start form. Use for paging.
     * @param {number} limit                Result count. Default and max is 1000
     * @returns {Promise<MinerInfo[]>}      List of filtered MinerInfo objects.
     */
    searchMinerVoting(accountName: string, keyword: string, myVotes?: boolean, sort?: MinerOrder, fromMinerId?: string, limit?: number): Promise<MinerInfo[]>;
    /**
     * Update account properties.
     * https://docs.decent.ch/developer/structgraphene_1_1wallet_1_1wallet__data.html#a7e45dcef220b45e13f0918b1036cbf41
     *
     * @param {string} accountId                Account id of account that is about to be updated. Example: '1.2.345'.
     * @param {UpdateAccountParameters} params  UpdateAccountParameters object with parameters to be changed.
     * @param {string} privateKey               Private key of account that is about to be changed, to sign transaction.
     *                                          In WIF(hex)(Wallet Import Format) format.
     * @returns {Promise<Boolean>}              Value confirming successful transaction broadcasting.
     */
    updateAccount(accountId: string, params: UpdateAccountParameters, privateKey: string, broadcast?: boolean): Promise<Operation>;
}
