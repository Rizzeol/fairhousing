/**
 * @module AssetModule
 */
import { ApiConnector } from '../api/apiConnector';
import { DatabaseApi } from '../api/database';
import { Asset } from '../model/transaction';
import { ChainApi } from '../api/chain';
import { ApiModule } from './ApiModule';
import { AssetObject, DCoreAssetObject, MonitoredAssetOptions, RealSupply, UserIssuedAssetInfo } from '../model/asset';
export declare class AssetModule extends ApiModule {
    MAX_SHARED_SUPPLY: number;
    constructor(dbApi: DatabaseApi, apiConnector: ApiConnector, chainApi: ChainApi);
    /**
     *  List assets available on DCore network.
     *  https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#adaff907a467869849e77c3ac0b8beca8
     *
     * @param {string} lowerBoundSymbol     Asset symbol to start list with. Example 'DCT'
     * @param {number} limit                Number of results. Default 100(Max)
     * @param {boolean} formatAssets        Optional parameter to convert amounts and fees of AssetObject from blockchain asset
     *                                      amount format to right precision format of asset. Example: 100000000 => 1 DCT.
     *                                      Default: false.
     * @returns {AssetObject[]}             AssetObject list.
     */
    listAssets(lowerBoundSymbol: string, limit?: number, formatAssets?: boolean): Promise<AssetObject[]>;
    /**
     * Create UIA(User Issued Asset).
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#a3f5461005ce7d6fb69a8878a6513fe1f
     *
     * @param {string} issuer                   Issuer's account id in format '1.2.X'. Example '1.2.345'.
     * @param {string} symbol                   Symbol of newly created asset. NOTE: Price for create asset is based on number of letters.
     *                                          used in asset symbol.
     * @param {number} precision                Number of fraction digits for asset.
     * @param {string} description              Asset description. Maximum length is 1000 chars.
     * @param {number} maxSupply                The maximum supply of this asset which may exist at any given time
     * @param {number} baseExchangeAmount       Amount of custom tokens for exchange rate to quoteExchangeAmount DCT tokens.
     * @param {number} quoteExchangeAmount      Number of DCT tokens for rxchange rate.
     * @param {boolean} isExchangable           Set 'true' to allow implicit conversion of asst to core asset.
     * @param {boolean} isSupplyFixed           Set value 'true' to fixate token maxSupply, 'false' for changeable maxSupply value.
     *                                          NOTE: only can be changed from 'false' to 'true'
     * @param {string} issuerPrivateKey         Private key to sign transaction in WIF(hex) (Wallet Import Format) format.
     * @returns {Promise<boolean>}              Value confirming successful transaction broadcasting.
     */
    createUserIssuedAsset(issuer: string, symbol: string, precision: number, description: string, maxSupply: number, baseExchangeAmount: number, quoteExchangeAmount: number, isExchangeable: boolean, isSupplyFixed: boolean, issuerPrivateKey: string): Promise<boolean>;
    /**
     * Issue created custom user token to account.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#a995074673211a3a6c4d94cafefd0ad56
     *
     * @param {string} assetSymbol          Asset symbol of asset to be issued. Example 'DCT'
     * @param {number} amount               Amount of asset ot be issued
     * @param {string} issueToAccount       Account id to whom asset will be issued. In format '1.2.X'. Example '1.2.345.
     * @param {string} memo                 Message for asset receiver
     * @param {string} issuerPKey           Issuer private key for transaction sign
     * @returns {Promise<boolean>}          Value confirming successful transaction broadcasting.
     */
    issueAsset(assetSymbol: string, amount: number, issueToAccount: string, memo: string, issuerPKey: string): Promise<boolean>;
    /**
     * Update information in custom token.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#af5248d111fa885580636adb468d92e16
     *
     * @param {string} symbol                   Asset symbol of updated asset. Example 'DCT'.
     * @param {UserIssuedAssetInfo} newInfo     New information for update.
     * @param {string} issuerPKey               Account private key for transaction sign.
     * @returns {Promise<any>}                  Value confirming successful transaction broadcasting.
     */
    updateUserIssuedAsset(symbol: string, newInfo: UserIssuedAssetInfo, issuerPKey: string): Promise<boolean>;
    /**
     * Fund asset pools for asset exchanging.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#ab018196310aaa6118877d219d9749305
     *
     * @param {string} fromAccountId     Account id of account sending DCT asset. In format '1.2.X'. Example '1.2.345'.s
     * @param {number} uiaAmount         Amount of custom token to be send to pool.
     * @param {string} uiaSymbol         Asset symbol of custom token which pool to be funded.
     * @param {number} dctAmount         Amount of DCT token to be send to pool.
     * @param {string} dctSymbol         Asset symbol of DCT asset. Set always to 'DCT'.
     * @param {string} privateKey        Account private key used for signing transaction.
     * @returns {Promise<boolean>}       Value confirming successful transaction broadcasting.
     */
    fundAssetPools(fromAccountId: string, uiaAmount: number, uiaSymbol: string, dctAmount: number, privateKey: string): Promise<boolean>;
    /**
     * Discard asset from network circulation.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#ae79e94dc01997493539ab0e01a505c03
     *
     * @param {string} payer            Account id in format '1.2.X'. Example '1.2.345'.
     * @param {string} symbol           Asset symbol of asset to be removed.
     * @param {number} amountToReserve  Amount of asset to be removed.
     * @param {string} privateKey       Payer's private key to sign the transaction.
     * @returns {Promise<boolean>}      Value confirming successful transaction broadcasting.
     */
    assetReserve(payer: string, symbol: string, amountToReserve: number, privateKey: string): Promise<boolean>;
    /**
     * Withdraw from asset pools.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#ac812b96ccef7f81ca97ebda433d98e63
     *
     * @param {string} issuer       Issuer's account id in format '1.2.X'. Example '1.2.345'.
     * @param {string} uiaAmount    Custom asset amount.
     * @param {string} uiaSymbol    Custom asset symbol.
     * @param {string} dctAmount    Amount of core DCT asset.
     * @param {string} dctSymbol    DCT asset symbol. Always set to 'DCT'.
     * @param {string} privateKey   Issuer's private key to sign the transaction.
     * @returns {Promise<boolean>}  Value confirming successful transaction broadcasting.
     */
    assetClaimFees(issuer: string, uiaAmount: number, uiaSymbol: string, dctAmount: number, privateKey: string): Promise<boolean>;
    /**
     * Get asset object.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#a012e918ecef1d24b2dee7ef64dca5018
     *
     * @param {string} assetId                  Asset id in format '1.3.X'. Example '1.3.0'.
     * @param {string} formatAsset              Optional parameter to convert amounts and fees of DCoreAssetObject from blockchain asset
     *                                          amount format to right precision format of asset. Example: 100000000 => 1 DCT.
     *                                          Default: false.
     * @returns {Promise<DCoreAssetObject>}     DCoreAssetObject of desired asset.
     */
    getAsset(assetId: string, formatAsset?: boolean): Promise<DCoreAssetObject>;
    /**
     * List of desired assets.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#ad88d6aec5d661d7f7c40a83291d78ea8
     *
     * @param {string[]} assetIds               List of asset ids to get. Example ['1.3.0', '1.3.1']
     * @param {boolean} formatAssets            Optional parameter to convert amounts and fees of DCoreAssetObject from blockchain asset
     *                                          amount format to right precision format of asset. Example: 100000000 => 1 DCT.
     *                                          Default: false.
     * @returns {Promise<DCoreAssetObject>}     DCoreAssetObject of desired asset.
     */
    getAssets(assetIds: string[], formatAssets?: boolean): Promise<DCoreAssetObject[]>;
    /**
     * Format asset to DCore DCT asset format
     *
     * @deprecated                  This method will be removed in future versions
     * @param {string} symbol       Asset symbol
     * @param {string} amount       Amount to format
     * @returns  {Promise<Asset>}   Formatted Asset object
     */
    priceToDCT(symbol: string, amount: number): Promise<Asset>;
    /**
     * Miner proposes exchange rate for monitored asset.
     * NOTE: Only active miners can.
     * https://docs.decent.ch/developer/group___wallet_a_p_i___asset.html#ga4ae6711f7d7ab2912d3e3b0a2997a8c3
     *
     * @param {string} publishingAccount
     * @param {string} symbol
     * @param {number} exchangeBaseAmount
     * @param {string} exchangeQuoteAmount
     * @param {string} privateKey
     * @returns {Promise<boolean>}  Value confirming successful transaction broadcasting.
     */
    publishAssetFeed(publishingAccount: string, symbol: string, exchangeBaseAmount: number, exchangeQuoteAmount: number, privateKey: string): Promise<boolean>;
    /**
     * List miner's proposed feeds.
     * https://docs.decent.ch/developer/classgraphene_1_1app_1_1database__api__impl.html#a56a36fac11722644d2bdfd9552b13658
     *
     * @param {string} minerAccountId
     * @param {number} limit
     * @returns {Promise<any>}
     */
    getFeedsByMiner(minerAccountId: string, limit?: number): Promise<any>;
    /**
     * Amount of active DCT tokens in DCore network circulation.
     * @returns {Promise<any>}
     */
    getRealSupply(): Promise<RealSupply>;
    /**
     * Get monitored asset options of selected asset.
     * https://docs.decent.ch/developer/group___wallet_a_p_i___asset.html#ga10bc8c39c64b7fe31c0f27613162ea16
     *
     * @param {string} assetId                          Monitored asset id in format '1.3.X'. Example '1.3.45'.
     * @returns {Promise<MonitoredAssetOptions|null>}   MonitoredAssetOptions object or null if asset is not monitored
     */
    getMonitoredAssetData(assetId: string): Promise<MonitoredAssetOptions | null>;
    private formatAssets(assets);
    /**
     * Create monitored asset.
     * NOTE: only miner can create monitored asset.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#a03534abbae12c7aa01ca5afb4ceb9575
     *
     * @param {string} issuer               Account id of miner who creating monitored asset. In format '1.2.X'. Example '1.2.345'.
     * @param {string} symbol               Asset symbol of newly created asset. Example 'MONAST'.
     * @param {number} precision            Number of digits on the right side of decimal point. Value needs to be lower-equal 12.
     * @param {string} description          Assets's description. Up to 1000 characters.
     * @param {number} feedLifetimeSec      Time during which is active miners feed proposals valid.
     * @param {number} minimumFeeds         Minimum number of feed proposals from miners.
     * @param {string} issuerPrivateKey     Issuer's private key to sign the transaction.
     * @returns {Promise<boolean>}          Value confirming successful transaction broadcasting.
     */
    createMonitoredAsset(issuer: string, symbol: string, precision: number, description: string, feedLifetimeSec: number, minimumFeeds: number, issuerPrivateKey: string): Promise<boolean>;
    /**
     * Update information in monitored asset.
     * https://docs.decent.ch/developer/classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl.html#adfa5687dce7e6cb119dd14151006e8bf
     *
     * @param {string} symbol               Asset symbol to be updated.
     * @param {string} description          New description for monitored asset. Up to 1000 characters.
     * @param {number} feedLifetimeSec      Time during which is active miners feed proposals valid.
     * @param {number} minimumFeeds         Minimum number of feed proposals from miners.
     * @param {string} privateKey           Issuer's private key to sign the transaction.
     * @returns {Promise<boolean>}          Value confirming successful transaction broadcasting.
     */
    updateMonitoredAsset(symbol: string, description: string, feedLifetimeSec: number, minimumFeeds: number, privateKey: string): Promise<boolean>;
    private convertDateToSeconds();
    private convertSecondsToDays(seconds);
    private getDate(days?);
}
