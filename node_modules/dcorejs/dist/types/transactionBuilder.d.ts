import { KeyPrivate } from './utils';
import { Operation } from './model/transaction';
import { ProposalCreateParameters } from './model/proposal';
/**
 * Class contains available transaction operation names constants
 */
export declare class TransactionBuilder {
    /**
     * dcore_js.lib/lib - TransactionBuilder
     */
    private _transaction;
    private _operations;
    constructor();
    /**
     * List of operations added to transaction
     * @return {Operation[]}
     */
    readonly operations: Operation[];
    /**
     * Get dcorejs-lib format transaction.
     *
     * @returns {any}   dcorejs-lib transaction object.
     */
    readonly transaction: any;
    /**
     * Append new operation to transaction object.
     *
     * @param {Operation} operation     Operation to append to transaction.
     * @return {boolean}                Successful operation add value.
     */
    addOperation(operation: Operation): string;
    /**
     * Transform transaction into proposal type transaction.
     *
     * @param {ProposalCreateParameters} proposalParameters     Proposal transaction parameters.
     */
    propose(proposalParameters: ProposalCreateParameters): void;
    /**
     * Broadcast transaction to DCore blockchain.
     *
     * @param {string} privateKey       Private key to sign transaction in WIF(hex)(Wallet Import Format) format .
     * @param sign                      If value is 'true' transaction will be singed, in 'false' transaction will not be signed.
     *                                  Default 'true'
     * @return {Promise<void>}          Void.
     */
    broadcast(privateKey: string, sign?: boolean): Promise<void>;
    /**
     * Set transaction fee required for transaction operation
     *
     * @return {Promise<void>}  Void.
     */
    private setTransactionFees();
    /**
     * Sign transaction with given private/public key pair.
     *
     * @param {KeyPrivate} privateKey   Private key to sign transaction.
     * @param {KeyPublic} publicKey     Public key related to private key.
     */
    signTransaction(privateKey: KeyPrivate): void;
    /**
     * Replace operation on operationIndex with newOperation
     *
     * @param {number} operationIndex               Index of operation to replace. Must be greater than 0 and smaller than
     *                                              length of operations.
     * @param {Operation} newOperation              Operation to be placed to index.
     * @returns {boolean}                           Returns true if replaced, false otherwise.
     */
    replaceOperation(operationIndex: number, newOperation: Operation): boolean;
    /**
     * Displays current transaction
     * @returns {any}   dcorejs-lib format transaction object.
     */
    previewTransaction(): any;
}
