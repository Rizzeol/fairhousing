/**
 * @module Model/OperationPrototype
 */
import { Asset, Memo, PriceFeed, RegionalPrice } from './transaction';
import { Key, KeyParts } from './content';
import { Authority, Options } from './account';
import { AssetOptions, MonitoredAssetOptions } from './asset';
import { Block } from './explorer';
import AssetExchangeRate = Block.AssetExchangeRate;
export declare abstract class OperationType {
}
export interface TransferType extends OperationType {
    fee?: Asset;
    from: string;
    to: string;
    amount: Asset;
    memo: Memo;
}
export declare class TransferPrototype {
    static getPrototype(): TransferType;
}
export interface ContentCancellationType extends OperationType {
    author: string;
    URI: string;
}
export declare class ContentCancelPrototype {
    static getPrototype(): ContentCancellationType;
}
export interface BuyContentType extends OperationType {
    URI: string;
    consumer: string;
    price: Asset;
    region_code_from: number;
    pubKey: Key;
}
export declare class BuyContentPrototype {
    static getPrototype(): BuyContentType;
}
export interface SubmitContentType extends OperationType {
    size: number;
    author: string;
    co_authors: any[];
    URI: string;
    quorum: number;
    price: RegionalPrice[];
    hash: string;
    seeders: string[];
    key_parts: KeyParts[];
    expiration: string;
    publishing_fee: Asset;
    synopsis: string;
}
export declare class SubmitContentPrototype {
    static getPrototype(): SubmitContentType;
}
export interface UpdateAccountType extends OperationType {
    account: string;
    owner: Authority;
    active: Authority;
    new_options: Options;
    extensions: object;
}
export declare class UpdateAccountPrototype {
    static getPrototype(): UpdateAccountType;
}
export interface AssetCreateType extends OperationType {
    issuer: string;
    symbol: string;
    precision: number;
    description: string;
    options: AssetOptions;
    is_exchangeable: boolean;
    extensions: Array<any>;
    monitored_asset_opts?: MonitoredAssetOptions;
}
export declare class AssetCreatePrototype {
    static getPrototype(): AssetCreateType;
}
export interface IssueAssetType extends OperationType {
    issuer: string;
    asset_to_issue: Asset;
    issue_to_account: string;
    memo?: Memo;
    extensions: object;
}
export declare class IssueAssetPrototype {
    static getPrototype(): IssueAssetType;
}
export interface UpdateIssuedAssetType extends OperationType {
    issuer: string;
    asset_to_update: string;
    new_description: string;
    max_supply: number;
    core_exchange_rate: AssetExchangeRate;
    is_exchangeable: boolean;
    new_issuer?: string;
    extensions: object;
}
export declare class UpdateUserIssuedAssetPrototype {
    static getPrototype(): UpdateIssuedAssetType;
}
export interface AssetFundPoolsType extends OperationType {
    from_account: string;
    uia_asset: Asset;
    dct_asset: Asset;
}
export declare class AssetFundPoolsPrototype {
    static getPrototype(): AssetFundPoolsType;
}
export interface AssetReserveType extends OperationType {
    payer: string;
    amount_to_reserve: Asset;
    extensions: object;
}
export declare class AssetReservePrototype {
    static getPrototype(): AssetReserveType;
}
export interface AssetClaimFeesType extends OperationType {
    issuer: string;
    uia_asset: Asset;
    dct_asset: Asset;
    extensions: object;
}
export declare class AssetClaimFeesPrototype {
    static getPrototype(): AssetClaimFeesType;
}
export interface LeaveRatingAndCommentType extends OperationType {
    URI: string;
    consumer: string;
    comment: string;
    rating: number;
}
export declare class LeaveRatingAndCommentPrototype {
    static getPrototype(): LeaveRatingAndCommentType;
}
export interface AssetPublishFeedType extends OperationType {
    publisher: string;
    asset_id: string;
    feed: PriceFeed;
    extensions: object;
}
export declare class AssetPublishFeedPrototype {
    static getPrototype(): AssetPublishFeedType;
}
export interface MinerCreateType extends OperationType {
    miner_account: string;
    url: string;
    block_signing_key: string;
}
export declare class MinerCreatePrototype {
    static getPrototype(): MinerCreateType;
}
export interface MinerUpdateType extends OperationType {
    miner: string;
    miner_account: string;
    new_url: string;
    new_signing_key: string;
}
export declare class MinerUpdatePrototype {
    static getPrototype(): MinerUpdateType;
}
export interface MinerUpdateGlobalParametersType extends OperationType {
    new_parameters: {
        current_fees?: {
            parameters: Array<[number, object]>;
            scale: number;
        };
        block_interval?: number;
        maintenance_interval?: number;
        maintenance_skip_slots?: number;
        miner_proposal_review_period?: number;
        maximum_transaction_size?: number;
        maximum_block_size?: number;
        maximum_time_until_expiration?: number;
        maximum_proposal_lifetime?: number;
        maximum_asset_feed_publishers?: number;
        maximum_miner_count?: number;
        maximum_authority_membership?: number;
        cashback_vesting_period_seconds?: number;
        cashback_vesting_threshold?: number;
        max_predicate_opcode?: number;
        max_authority_depth?: number;
        extensions?: Array<any>;
    };
}
export declare class MinerUpdateGlobalParametersPrototype {
    static getPrototype(): MinerUpdateGlobalParametersType;
}
export interface ProposalCreateType extends OperationType {
    fee_paying_account: string;
    proposed_ops: OperationType[];
    expiration_time: string;
    review_period_seconds: number;
    extensions: Array<any>;
}
export declare class ProposalCreatePrototype {
    static getPrototype(): ProposalCreateType;
}
export interface ProposalUpdateType extends OperationType {
    fee_paying_account: string;
    proposal: string;
    active_approvals_to_add: Array<string>;
    active_approvals_to_remove: Array<string>;
    owner_approvals_to_add: Array<string>;
    owner_approvals_to_remove: Array<string>;
    key_approvals_to_add: Array<string>;
    key_approvals_to_remove: Array<string>;
    extensions: Array<any>;
}
export declare class ProposalUpdatePrototype {
    static getPrototype(): ProposalUpdateType;
}
export interface OperationWrapperType extends OperationType {
    op: object;
}
export declare class OperationWrapperPrototype {
    static getPrototype(): OperationWrapperType;
}
export interface CreateAccountType extends OperationType {
    fee: Asset;
    name: string;
    owner: Authority;
    active: Authority;
    options: Options;
    registrar: string;
    extensions: any;
}
export declare class CreateAccountPrototype {
    static getPrototype(): CreateAccountType;
}
export interface VestingBalanceWithdrawType extends OperationType {
    vesting_balance: string;
    owner: string;
    amount: Asset;
}
export declare class VestingBalanceWithdrawPrototype {
    static getPrototype(): VestingBalanceWithdrawType;
}
export interface UpdateMonitoredAssetType extends OperationType {
    issuer: string;
    asset_to_update: string;
    new_description: string;
    new_feed_lifetime_sec: number;
    new_minimum_feeds: number;
}
export declare class UpdateMonitoredAssetPrototype {
    static getPrototype(): UpdateMonitoredAssetType;
}
export interface SubscribeType extends OperationType {
    from: string;
    to: string;
    price: Asset;
}
export declare class SubscribePrototype {
    static getPrototype(): SubscribeType;
}
export interface SubscribeByAuthorType extends OperationType {
    from: string;
    to: string;
}
export declare class SubscribeByAuthorPrototype {
    static getPrototype(): SubscribeByAuthorType;
}
export interface AutomaticRenewalOfSubscriptionType extends OperationType {
    consumer: string;
    subscription: string;
    automatic_renewal: boolean;
}
export declare class SetAutomaticRenewalOfSubscriptionPrototype {
    static getPrototype(): AutomaticRenewalOfSubscriptionType;
}
