import { DCoreAssetObject } from './asset';
export declare type AccountNameIdPair = [string, string];
export interface HistoryOptions {
    fromId?: string;
    resultLimit?: number;
}
export interface TransactionRaw {
    id: string;
    m_from_account: string;
    m_operation_type: number;
    m_str_description: string;
    m_timestamp: string;
    m_to_account: string;
    m_transaction_amount: Asset;
    m_transaction_fee: Asset;
}
export interface DCoreAccount {
    proposals: string[];
    statistics: string;
    vesting_balances: any[];
    orders: any[];
    active: Authority;
    call_orders: any[];
    top_n_control_flags: number;
    name: string;
    registrar: string;
    rights_to_publish: PublishRights;
    owner: Authority;
    balances: Balances;
    id: string;
    registrar_name: string;
    options: Options;
}
export interface Balances {
    [key: string]: string;
}
export interface Account {
    id: string;
    registrar: string;
    name: string;
    owner: Authority;
    active: Authority;
    options: Options;
    rights_to_publish: PublishRights;
    statistics: string;
    top_n_control_flags: number;
}
export interface PublishRights {
    is_publishing_manager: boolean;
    publishing_rights_received: any[];
    publishing_rights_forwarded: any[];
}
export declare class Asset {
    amount: number;
    asset_id: string;
    static createDCTAsset(amount: number): Asset;
    static create(amount: number, assetObject: DCoreAssetObject): Asset;
    constructor(amount: number, assetId: string);
}
export interface Authority {
    weight_threshold: number;
    account_auths: any[];
    key_auths: [string, number][];
}
export declare class KeyAuth {
    private _key;
    private _value;
    constructor(key: string, value?: number);
    keyAuthFormat(): any[];
}
export declare enum OperationType {
    transfer = 0,
    account_create = 1,
    content_submit = 2,
    content_buy = 3,
    content_rate = 4,
    subscription = 5,
}
export interface Options {
    memo_key?: string;
    voting_account?: string;
    num_miner?: number;
    votes?: any[];
    extensions?: any[];
    allow_subscription?: boolean;
    price_per_subscribe?: Asset;
    subscription_period?: number;
}
export declare class TransactionRecord {
    id: string;
    fromAccountName: string;
    toAccountName: string;
    fromAccountId: string;
    toAccountId: string;
    operationType: OperationType;
    transactionAmount: number;
    transactionAsset: string;
    transactionFee: number;
    transactionFeeAsset: string;
    description: string;
    timestamp: string;
    memo: TransactionMemo;
    memoString: string;
    constructor(transaction: any, privateKeys: string[]);
}
export declare class TransactionMemo {
    valid: boolean;
    from: string;
    message: string;
    nonce: string;
    to: string;
    constructor(transaction: any);
    decryptedMessage(privateKeys: string[]): string;
}
export interface HistoryRecord {
    id: string;
    op: [number, any];
    result: any[];
    block_num: number;
    trx_in_block: number;
    op_in_trx: number;
    virtual_op: number;
}
export interface MinerInfo {
    id: string;
    name: string;
    url: string;
    total_votes: number;
    voted: boolean;
}
export interface WalletExport {
    version: number;
    chain_id: string;
    my_accounts: Account[];
    cipher_keys: string;
    extra_keys: [string, string[]][];
    pending_account_registrations: any[];
    pending_miner_registrations: any[];
    ws_server: string;
    ws_user: string;
    ws_password: string;
}
export interface SubscriptionParameters {
    allowSubscription: boolean;
    pricePerSubscribeAmount: number;
    subscriptionPeriod: number;
}
export interface UpdateAccountParameters {
    newOwnerKey?: string;
    newActiveKey?: string;
    newMemoKey?: string;
    newNumMiner?: number;
    newVotes?: Array<string>;
    newSubscription?: SubscriptionParameters;
}
export declare enum AccountError {
    account_does_not_exist = "account_does_not_exist",
    account_fetch_failed = "account_fetch_failed",
    transaction_history_fetch_failed = "transaction_history_fetch_failed",
    transfer_missing_pkey = "transfer_missing_pkey",
    transfer_sender_account_not_found = "transfer_sender_account_not_found",
    transfer_receiver_account_not_found = "transfer_receiver_account_not_found",
    database_operation_failed = "database_operation_failed",
    transaction_broadcast_failed = "transaction_broadcast_failed",
    account_keys_incorrect = "account_keys_incorrect",
    bad_parameter = "bad_parameter",
    history_fetch_failed = "history_fetch_failed",
    cannot_update_miner_votes = "cannot_update_miner_votes",
    votes_does_not_changed = "votes_does_not_changed",
    asset_does_not_exist = "asset_does_not_exist",
    account_update_failed = "account_update_failed",
    syntactic_error = "syntactic_error",
}
