/// <reference types="node" />
import { DCoreAssetObject } from './model/asset';
export interface BrainKeyInfo {
    brain_priv_key: string;
    wif_priv_key: string;
    pub_key: string;
}
/**
 * PKI private key
 */
export declare class KeyPrivate {
    private _privateKey;
    /**
     * Create KeyPrivate from brain key.
     *
     * @param {string} brainKey     Brain key to generate private key from.
     * @param {number} sequence     Sequence number, for generating derived private key
     * @returns {KeyPrivate}        KeyPrivate instance.
     */
    static fromBrainKey(brainKey: string, sequence?: number): KeyPrivate;
    /**
     * Create KeyPrivate from WIF/hex format of private key.
     * @param {string} privateKeyWif    Private key in WIF(hex) (Wallet Import Format) format.
     * @returns {KeyPrivate}            KeyPrivate instance.
     */
    static fromWif(privateKeyWif: string): KeyPrivate;
    constructor(privateKey: any);
    /**
     * Raw representation of key for dcorejs_libjs
     * library purposes.
     * @return {any}
     */
    readonly key: any;
    /**
     * WIF format string representation of key
     * @return {string}
     */
    readonly stringKey: string;
    /**
     * Get public key for private key.
     * @returns {KeyPublic}     KeyPublic instance.
     */
    getPublicKey(): KeyPublic;
}
/**
 * PKI public key
 */
export declare class KeyPublic {
    private _publicKey;
    /**
     * Create KeyPublic object from public key string.
     * @param {string} publicString     Public key string.
     * @returns {KeyPublic}             KeyPublic instance.
     */
    static fromString(publicString: string): KeyPublic;
    /**
     * Create KeyPublic from KeyPrivate object.
     * @param {KeyPrivate} privateKey   KeyPrivate object.
     * @returns {KeyPublic}             KeyPublic instance.
     */
    static fromPrivateKey(privateKey: KeyPrivate): KeyPublic;
    constructor(publicKey: any);
    /**
     * Raw representation of key for dcorejs_libjs
     * library purposes.
     * @return {any}
     */
    readonly key: any;
    /**
     * String representation of key
     * @return {string}     String public key.
     */
    readonly stringKey: string;
}
export declare class ElGamalKeys {
    private _publicKey;
    private _privateKey;
    readonly privateKey: string;
    readonly publicKey: string;
    /**
     * Generate ElGamalKeys object from public key WIF.
     * @param {string} privateKey       Private key in WIF(hex) (Wallet Import Format) format
     * @returns {ElGamalKeys}           ElGamalKeys instance.
     */
    static generate(privateKey: string): ElGamalKeys;
    constructor(elGPrivateKey: string, elGPublicKey: string);
}
export declare class Utils {
    /**
     * Format DCT price amount from blockchain format to real and readable formatted string.
     *
     * Example: Amount price from blockchain is 1, formatted price 0.00000001 DCT
     *
     * @param {number} dctAmount    Amount of DCT asset.
     * @return {string}             Formatted amount in string format.
     */
    static formatToReadiblePrice(dctAmount: number): string;
    /**
     * Formats amount to DCT precision.
     * Value is devided by asset's precision factor
     * Note: Most of amount values are already formatted for this precision format.
     *
     * @param {number} amount   Amount to be formatted.
     * @returns {number}        DCore formatted amount.
     */
    static formatAmountForDCTAsset(amount: number): number;
    /**
     * Formats amount to format with decimal numbers.
     * Note: Most of amount values are already formatted for this precision format.
     *
     * @param {number} amount               Amount of asset in DCore network format.
     * @param {DCoreAssetObject} asset      Asset object to format amount to.
     * @returns {number}                    Formatted number in format with decimal numbers.
     */
    static formatAmountForAsset(amount: number, asset: DCoreAssetObject): number;
    /**
     * Format amount value for DCore, to format without decimal numbers.
     *
     * @param {number} amount           Amount with decimal numbers to format.
     * @param {DCoreAssetObject} asset  Asset object for formatting.
     * @returns {number}                Formatted number.
     */
    static formatAmountToAsset(amount: number, asset: DCoreAssetObject): number;
    /**
     * RIPEMD 160 hash
     *
     * @param {Buffer} fromBuffer       Buffer to calculate hash from.
     * @returns {string}                RIPEMD160 hash.
     */
    static ripemdHash(fromBuffer: Buffer): string;
    /**
     * Generate private and public key from given brain key.
     *
     * @param {string} fromBrainKey                                     Brain key to generate keys from.
     * @return {any[]} [privateKey: KeyPrivate, publicKey: KeyPublic]   Keys.
     */
    static generateKeys(fromBrainKey: string): [KeyPrivate, KeyPublic];
    /**
     * Calculate public key from given private key.
     *
     * @param {KeyPrivate} privkey      Private key to get public key for.
     * @return {KeyPublic}              KeyPublic object.
     */
    static getPublicKey(privateKey: KeyPrivate): KeyPublic;
    /**
     * Create KeyPrivate object from WIF format of private key.
     *
     * @param {string} pkWif    Private key in WIF(hex) (Wallet Import Format) format.
     * @return {KeyPrivate}     KeyPrivate object.
     */
    static privateKeyFromWif(pkWif: string): KeyPrivate;
    /**
     * Create KeyPublic object from string format of public key.
     *
     * @param {string} pubKeyString     Public key string.
     * @return {KeyPublic}              KeyPublic object.
     */
    static publicKeyFromString(pubKeyString: string): KeyPublic;
    /**
     * Get random brain key.
     * https://docs.decent.ch/developer/group___wallet_a_p_i___account.html#ga4841362854805ef897b8415eb8866424
     *
     * @returns {string}    Brain key string.
     */
    static suggestBrainKey(): string;
    /**
     * Get brainkey info with brain key, private key and public key.
     * https://docs.decent.ch/developer/group___wallet_a_p_i___account.html#ga1cca4c087c272e07681b2c6d203b7d74
     *
     * @param {string} brainKey     Brain keys string.
     * @returns {BrainKeyInfo}      BrainKeyInfo object.
     */
    static getBrainKeyInfo(brainKey: string): BrainKeyInfo;
    /**
     * Normalize brain key for futher usage in Utils's methods
     *
     * @param {string} brainKey         Brain key generated from Utils.suggestBrainKey or from wallet CLI
     * @returns {string}                Normalized brain key
     */
    static normalize(brainKey: string): string;
    /**
     * Generate random
     * @returns {string}
     */
    static generateNonce(): string;
    /**
     * Generates El Gamal public key from given El Gamal private key
     *
     * @param {string} elGamalPrivate   El Gamal private key string.
     * @returns {string}                ElGamal public key string.
     */
    static elGamalPublic(elGamalPrivate: string): string;
    /**
     * Generates El Gamal key for content exchange from given private key WIF string
     *
     * @param {string} privateKeyWif        WIF formatted private key of account for which generating El Gamal key
     * @returns {string}                    El Gamal private key string.
     */
    static elGamalPrivate(privateKeyWif: string): string;
    /**
     * Calculate El Gamal keys pair from WIF private key
     * @param {string} privateKeyWif    WIF formatted private key of account for which generating El Gamal keys
     * @returns {ElGamalKeys}           ElGamalKeys object.
     */
    static generateElGamalKeys(privateKeyWif: string): ElGamalKeys;
    /**
     * Generate random brain key and El Gamal keys from brain key.
     *
     * @returns {[BrainKeyInfo , ElGamalKeys]}
     */
    static generateBrainKeyElGamalKey(): [BrainKeyInfo, ElGamalKeys];
    /**
     * Calculate derived private key apart from primary(with sequence number 0).
     * NOTE: May be used as additional keys when creating account - owner, memo key
     *
     * @param {string} brainKey     Brain key string.
     * @param {number} sequence     Sequence number to derive private key from it. If selected 0, primary private key is generated.
     * @returns {KeyPrivate}        KeyPrivate object.
     */
    static derivePrivateKey(brainKey: string, sequence: number): KeyPrivate;
}
